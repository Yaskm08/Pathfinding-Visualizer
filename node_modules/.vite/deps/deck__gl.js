import {
  deckgl_default
} from "./chunk-FK4QJFLJ.js";
import {
  GeohashLayer,
  GreatCircleLayer,
  H3ClusterLayer,
  H3HexagonLayer,
  MVTLayer,
  QuadkeyLayer,
  S2Layer,
  ScenegraphLayer,
  SimpleMeshLayer,
  TerrainLayer,
  Tile3DLayer,
  TileLayer,
  Tileset2D,
  TripsLayer
} from "./chunk-MA2F2ED3.js";
import {
  ArcLayer,
  BitmapLayer,
  ColumnLayer,
  GeoJsonLayer,
  GridCellLayer,
  IconLayer,
  LineLayer,
  PathLayer,
  PointCloudLayer,
  PolygonLayer,
  ScatterplotLayer,
  SolidPolygonLayer,
  TextLayer
} from "./chunk-AXYCMOZF.js";
import {
  AmbientLight,
  AttributeManager,
  Buffer,
  COORDINATE_SYSTEM,
  CompositeLayer,
  Controller,
  CubeGeometry,
  Deck,
  DeckRenderer,
  DirectionalLight,
  FEATURES,
  FirstPersonController,
  FirstPersonView,
  FirstPersonViewport,
  FlyToInterpolator,
  Framebuffer,
  Geometry,
  GlobeController,
  GlobeView,
  GlobeViewport,
  Layer,
  LayerExtension,
  LayerManager,
  LightingEffect,
  LinearInterpolator,
  MapController,
  MapView,
  Model,
  OPERATION,
  OrbitController,
  OrbitView,
  OrbitViewport,
  OrthographicController,
  OrthographicView,
  OrthographicViewport,
  PointLight,
  PostProcessEffect,
  TRANSITION_EVENTS,
  Tesselator,
  Texture2D,
  Transform,
  TransitionInterpolator,
  UNIT,
  VERSION,
  View,
  Viewport,
  WebMercatorViewport,
  _defineProperty,
  assert4 as assert,
  compareProps,
  createIterable,
  cssToDeviceRatio,
  fp64LowPart,
  fp64arithmetic,
  getParameters,
  gouraudLighting,
  hasFeatures,
  isWebGL2,
  log_default,
  mergeShaders,
  phongLighting,
  picking_default,
  project32_default,
  project_default,
  readPixelsToBuffer,
  shadow_default,
  withParameters
} from "./chunk-HFDSMGWA.js";
import "./chunk-OE6NBOXF.js";
import "./chunk-TVOPUOW3.js";
import "./chunk-AUZ3RYOM.js";

// node_modules/@deck.gl/aggregation-layers/dist/esm/utils/aggregation-operation-utils.js
var AGGREGATION_OPERATION = {
  SUM: 1,
  MEAN: 2,
  MIN: 3,
  MAX: 4
};
function sumReducer(accu, cur) {
  return accu + cur;
}
function maxReducer(accu, cur) {
  return cur > accu ? cur : accu;
}
function minReducer(accu, cur) {
  return cur < accu ? cur : accu;
}
function getMean(pts, accessor) {
  if (Number.isFinite(accessor)) {
    return pts.length ? accessor : null;
  }
  const filtered = pts.map(accessor).filter(Number.isFinite);
  return filtered.length ? filtered.reduce(sumReducer, 0) / filtered.length : null;
}
function getSum(pts, accessor) {
  if (Number.isFinite(accessor)) {
    return pts.length ? pts.length * accessor : null;
  }
  const filtered = pts.map(accessor).filter(Number.isFinite);
  return filtered.length ? filtered.reduce(sumReducer, 0) : null;
}
function getMax(pts, accessor) {
  if (Number.isFinite(accessor)) {
    return pts.length ? accessor : null;
  }
  const filtered = pts.map(accessor).filter(Number.isFinite);
  return filtered.length ? filtered.reduce(maxReducer, -Infinity) : null;
}
function getMin(pts, accessor) {
  if (Number.isFinite(accessor)) {
    return pts.length ? accessor : null;
  }
  const filtered = pts.map(accessor).filter(Number.isFinite);
  return filtered.length ? filtered.reduce(minReducer, Infinity) : null;
}
function getValueFunc(aggregation, accessor, context) {
  const op = AGGREGATION_OPERATION[aggregation] || AGGREGATION_OPERATION.SUM;
  accessor = wrapAccessor(accessor, context);
  switch (op) {
    case AGGREGATION_OPERATION.MIN:
      return (pts) => getMin(pts, accessor);
    case AGGREGATION_OPERATION.SUM:
      return (pts) => getSum(pts, accessor);
    case AGGREGATION_OPERATION.MEAN:
      return (pts) => getMean(pts, accessor);
    case AGGREGATION_OPERATION.MAX:
      return (pts) => getMax(pts, accessor);
    default:
      return null;
  }
}
function wrapAccessor(accessor, context = {}) {
  if (Number.isFinite(accessor)) {
    return accessor;
  }
  return (pt) => {
    context.index = pt.index;
    return accessor(pt.source, context);
  };
}
function wrapGetValueFunc(getValue, context = {}) {
  return (pts) => {
    context.indices = pts.map((pt) => pt.index);
    return getValue(pts.map((pt) => pt.source), context);
  };
}

// node_modules/@deck.gl/aggregation-layers/dist/esm/utils/gpu-grid-aggregation/gpu-grid-aggregator-constants.js
var DEFAULT_RUN_PARAMS = {
  projectPoints: false,
  viewport: null,
  createBufferObjects: true,
  moduleSettings: {}
};
var MAX_32_BIT_FLOAT = 3402823466e29;
var MIN_BLEND_EQUATION = [32775, 32774];
var MAX_BLEND_EQUATION = [32776, 32774];
var MAX_MIN_BLEND_EQUATION = [32776, 32775];
var EQUATION_MAP = {
  [AGGREGATION_OPERATION.SUM]: 32774,
  [AGGREGATION_OPERATION.MEAN]: 32774,
  [AGGREGATION_OPERATION.MIN]: MIN_BLEND_EQUATION,
  [AGGREGATION_OPERATION.MAX]: MAX_BLEND_EQUATION
};
var DEFAULT_WEIGHT_PARAMS = {
  size: 1,
  operation: AGGREGATION_OPERATION.SUM,
  needMin: false,
  needMax: false,
  combineMaxMin: false
};
var PIXEL_SIZE = 4;

// node_modules/@deck.gl/aggregation-layers/dist/esm/utils/gpu-grid-aggregation/aggregate-to-grid-vs.glsl.js
var aggregate_to_grid_vs_glsl_default = "#define SHADER_NAME gpu-aggregation-to-grid-vs\n\nattribute vec3 positions;\nattribute vec3 positions64Low;\nattribute vec3 weights;\nuniform vec2 cellSize;\nuniform vec2 gridSize;\nuniform bool projectPoints;\nuniform vec2 translation;\nuniform vec3 scaling;\n\nvarying vec3 vWeights;\n\nvec2 project_to_pixel(vec4 pos) {\n  vec4 result;\n  pos.xy = pos.xy/pos.w;\n  result = pos + vec4(translation, 0., 0.);\n  result.xy = scaling.z > 0. ? result.xy * scaling.xy : result.xy;\n  return result.xy;\n}\n\nvoid main(void) {\n\n  vWeights = weights;\n\n  vec4 windowPos = vec4(positions, 1.);\n  if (projectPoints) {\n    windowPos = project_position_to_clipspace(positions, positions64Low, vec3(0));\n  }\n\n  vec2 pos = project_to_pixel(windowPos);\n\n  vec2 pixelXY64[2];\n  pixelXY64[0] = vec2(pos.x, 0.);\n  pixelXY64[1] = vec2(pos.y, 0.);\n  vec2 gridXY64[2];\n  gridXY64[0] = div_fp64(pixelXY64[0], vec2(cellSize.x, 0));\n  gridXY64[1] = div_fp64(pixelXY64[1], vec2(cellSize.y, 0));\n  float x = floor(gridXY64[0].x);\n  float y = floor(gridXY64[1].x);\n  pos = vec2(x, y);\n  pos = (pos * (2., 2.) / (gridSize)) - (1., 1.);\n  vec2 offset = 1.0 / gridSize;\n  pos = pos + offset;\n\n  gl_Position = vec4(pos, 0.0, 1.0);\n  gl_PointSize = 1.0;\n}\n";

// node_modules/@deck.gl/aggregation-layers/dist/esm/utils/gpu-grid-aggregation/aggregate-to-grid-fs.glsl.js
var aggregate_to_grid_fs_glsl_default = "#define SHADER_NAME gpu-aggregation-to-grid-fs\n\nprecision highp float;\n\nvarying vec3 vWeights;\n\nvoid main(void) {\n  gl_FragColor = vec4(vWeights, 1.0);\n  DECKGL_FILTER_COLOR(gl_FragColor, geometry);\n}\n";

// node_modules/@deck.gl/aggregation-layers/dist/esm/utils/gpu-grid-aggregation/aggregate-all-vs.glsl.js
var aggregate_all_vs_glsl_default = "#version 300 es\n#define SHADER_NAME gpu-aggregation-all-vs-64\n\nin vec2 position;\nuniform ivec2 gridSize;\nout vec2 vTextureCoord;\n\nvoid main(void) {\n  vec2 pos = vec2(-1.0, -1.0);\n  vec2 offset = 1.0 / vec2(gridSize);\n  pos = pos + offset;\n\n  gl_Position = vec4(pos, 0.0, 1.0);\n\n  int yIndex = gl_InstanceID / gridSize[0];\n  int xIndex = gl_InstanceID - (yIndex * gridSize[0]);\n\n  vec2 yIndexFP64 = vec2(float(yIndex), 0.);\n  vec2 xIndexFP64 = vec2(float(xIndex), 0.);\n  vec2 gridSizeYFP64 = vec2(gridSize[1], 0.);\n  vec2 gridSizeXFP64 = vec2(gridSize[0], 0.);\n\n  vec2 texCoordXFP64 = div_fp64(yIndexFP64, gridSizeYFP64);\n  vec2 texCoordYFP64 = div_fp64(xIndexFP64, gridSizeXFP64);\n\n  vTextureCoord = vec2(texCoordYFP64.x, texCoordXFP64.x);\n  gl_PointSize = 1.0;\n}\n";

// node_modules/@deck.gl/aggregation-layers/dist/esm/utils/gpu-grid-aggregation/aggregate-all-fs.glsl.js
var aggregate_all_fs_glsl_default = "#version 300 es\n#define SHADER_NAME gpu-aggregation-all-fs\n\nprecision highp float;\n\nin vec2 vTextureCoord;\nuniform sampler2D uSampler;\nuniform bool combineMaxMin;\nout vec4 fragColor;\nvoid main(void) {\n  vec4 textureColor = texture(uSampler, vec2(vTextureCoord.s, vTextureCoord.t));\n  if (textureColor.a == 0.) {\n    discard;\n  }\n  fragColor.rgb = textureColor.rgb;\n  fragColor.a = combineMaxMin ? textureColor.r : textureColor.a;\n}\n";

// node_modules/@deck.gl/aggregation-layers/dist/esm/utils/gpu-grid-aggregation/transform-mean-vs.glsl.js
var transform_mean_vs_glsl_default = "#define SHADER_NAME gpu-aggregation-transform-mean-vs\nattribute vec4 aggregationValues;\nvarying vec4 meanValues;\n\nvoid main()\n{\n  bool isCellValid = bool(aggregationValues.w > 0.);\n  meanValues.xyz = isCellValid ? aggregationValues.xyz/aggregationValues.w : vec3(0, 0, 0);\n  meanValues.w = aggregationValues.w;\n  gl_PointSize = 1.0;\n}\n";

// node_modules/@deck.gl/aggregation-layers/dist/esm/utils/resource-utils.js
var DEFAULT_PARAMETERS = {
  [10240]: 9728,
  [10241]: 9728
};
function getFloatTexture(gl, opts = {}) {
  const {
    width = 1,
    height = 1,
    data = null,
    unpackFlipY = true,
    parameters = DEFAULT_PARAMETERS
  } = opts;
  const texture = new Texture2D(gl, {
    data,
    format: isWebGL2(gl) ? 34836 : 6408,
    type: 5126,
    border: 0,
    mipmaps: false,
    parameters,
    dataFormat: 6408,
    width,
    height,
    unpackFlipY
  });
  return texture;
}
function getFramebuffer(gl, opts) {
  const {
    id,
    width = 1,
    height = 1,
    texture
  } = opts;
  const fb = new Framebuffer(gl, {
    id,
    width,
    height,
    attachments: {
      [36064]: texture
    }
  });
  return fb;
}

// node_modules/@deck.gl/aggregation-layers/dist/esm/utils/gpu-grid-aggregation/gpu-grid-aggregator.js
var BUFFER_NAMES = ["aggregationBuffer", "maxMinBuffer", "minBuffer", "maxBuffer"];
var ARRAY_BUFFER_MAP = {
  maxData: "maxBuffer",
  minData: "minBuffer",
  maxMinData: "maxMinBuffer"
};
var REQUIRED_FEATURES = [FEATURES.WEBGL2, FEATURES.COLOR_ATTACHMENT_RGBA32F, FEATURES.BLEND_EQUATION_MINMAX, FEATURES.FLOAT_BLEND, FEATURES.TEXTURE_FLOAT];
var GPUGridAggregator = class {
  static getAggregationData({
    aggregationData,
    maxData,
    minData,
    maxMinData,
    pixelIndex
  }) {
    const index = pixelIndex * PIXEL_SIZE;
    const results = {};
    if (aggregationData) {
      results.cellCount = aggregationData[index + 3];
      results.cellWeight = aggregationData[index];
    }
    if (maxMinData) {
      results.maxCellWieght = maxMinData[0];
      results.minCellWeight = maxMinData[3];
    } else {
      if (maxData) {
        results.maxCellWieght = maxData[0];
        results.totalCount = maxData[3];
      }
      if (minData) {
        results.minCellWeight = minData[0];
        results.totalCount = maxData[3];
      }
    }
    return results;
  }
  static getCellData({
    countsData,
    size = 1
  }) {
    const numCells = countsData.length / 4;
    const cellWeights = new Float32Array(numCells * size);
    const cellCounts = new Uint32Array(numCells);
    for (let i = 0; i < numCells; i++) {
      for (let sizeIndex = 0; sizeIndex < size; sizeIndex++) {
        cellWeights[i * size + sizeIndex] = countsData[i * 4 + sizeIndex];
      }
      cellCounts[i] = countsData[i * 4 + 3];
    }
    return {
      cellCounts,
      cellWeights
    };
  }
  static isSupported(gl) {
    return hasFeatures(gl, REQUIRED_FEATURES);
  }
  constructor(gl, opts = {}) {
    this.id = opts.id || "gpu-grid-aggregator";
    this.gl = gl;
    this.state = {
      weightAttributes: {},
      textures: {},
      meanTextures: {},
      buffers: {},
      framebuffers: {},
      maxMinFramebuffers: {},
      minFramebuffers: {},
      maxFramebuffers: {},
      equations: {},
      resources: {},
      results: {}
    };
    this._hasGPUSupport = isWebGL2(gl) && hasFeatures(this.gl, FEATURES.BLEND_EQUATION_MINMAX, FEATURES.COLOR_ATTACHMENT_RGBA32F, FEATURES.TEXTURE_FLOAT);
    if (this._hasGPUSupport) {
      this._setupModels();
    }
  }
  delete() {
    const {
      gridAggregationModel,
      allAggregationModel,
      meanTransform
    } = this;
    const {
      textures,
      framebuffers,
      maxMinFramebuffers,
      minFramebuffers,
      maxFramebuffers,
      meanTextures,
      resources
    } = this.state;
    gridAggregationModel === null || gridAggregationModel === void 0 ? void 0 : gridAggregationModel.delete();
    allAggregationModel === null || allAggregationModel === void 0 ? void 0 : allAggregationModel.delete();
    meanTransform === null || meanTransform === void 0 ? void 0 : meanTransform.delete();
    deleteResources([framebuffers, textures, maxMinFramebuffers, minFramebuffers, maxFramebuffers, meanTextures, resources]);
  }
  run(opts = {}) {
    this.setState({
      results: {}
    });
    const aggregationParams = this._normalizeAggregationParams(opts);
    if (!this._hasGPUSupport) {
      log_default.log(1, "GPUGridAggregator: not supported")();
    }
    return this._runAggregation(aggregationParams);
  }
  getData(weightId) {
    const data = {};
    const results = this.state.results;
    if (!results[weightId].aggregationData) {
      results[weightId].aggregationData = results[weightId].aggregationBuffer.getData();
    }
    data.aggregationData = results[weightId].aggregationData;
    for (const arrayName in ARRAY_BUFFER_MAP) {
      const bufferName = ARRAY_BUFFER_MAP[arrayName];
      if (results[weightId][arrayName] || results[weightId][bufferName]) {
        results[weightId][arrayName] = results[weightId][arrayName] || results[weightId][bufferName].getData();
        data[arrayName] = results[weightId][arrayName];
      }
    }
    return data;
  }
  updateShaders(shaderOptions = {}) {
    this.setState({
      shaderOptions,
      modelDirty: true
    });
  }
  _normalizeAggregationParams(opts) {
    const aggregationParams = {
      ...DEFAULT_RUN_PARAMS,
      ...opts
    };
    const {
      weights
    } = aggregationParams;
    if (weights) {
      aggregationParams.weights = normalizeWeightParams(weights);
    }
    return aggregationParams;
  }
  setState(updateObject) {
    Object.assign(this.state, updateObject);
  }
  _getAggregateData(opts) {
    const results = {};
    const {
      textures,
      framebuffers,
      maxMinFramebuffers,
      minFramebuffers,
      maxFramebuffers,
      resources
    } = this.state;
    const {
      weights
    } = opts;
    for (const id in weights) {
      results[id] = {};
      const {
        needMin,
        needMax,
        combineMaxMin
      } = weights[id];
      results[id].aggregationTexture = textures[id];
      results[id].aggregationBuffer = readPixelsToBuffer(framebuffers[id], {
        target: weights[id].aggregationBuffer,
        sourceType: 5126
      });
      if (needMin && needMax && combineMaxMin) {
        results[id].maxMinBuffer = readPixelsToBuffer(maxMinFramebuffers[id], {
          target: weights[id].maxMinBuffer,
          sourceType: 5126
        });
        results[id].maxMinTexture = resources["".concat(id, "-maxMinTexture")];
      } else {
        if (needMin) {
          results[id].minBuffer = readPixelsToBuffer(minFramebuffers[id], {
            target: weights[id].minBuffer,
            sourceType: 5126
          });
          results[id].minTexture = resources["".concat(id, "-minTexture")];
        }
        if (needMax) {
          results[id].maxBuffer = readPixelsToBuffer(maxFramebuffers[id], {
            target: weights[id].maxBuffer,
            sourceType: 5126
          });
          results[id].maxTexture = resources["".concat(id, "-maxTexture")];
        }
      }
    }
    this._trackGPUResultBuffers(results, weights);
    return results;
  }
  _renderAggregateData(opts) {
    const {
      cellSize,
      projectPoints,
      attributes,
      moduleSettings,
      numCol,
      numRow,
      weights,
      translation,
      scaling
    } = opts;
    const {
      maxMinFramebuffers,
      minFramebuffers,
      maxFramebuffers
    } = this.state;
    const gridSize = [numCol, numRow];
    const parameters = {
      blend: true,
      depthTest: false,
      blendFunc: [1, 1]
    };
    const uniforms = {
      cellSize,
      gridSize,
      projectPoints,
      translation,
      scaling
    };
    for (const id in weights) {
      const {
        needMin,
        needMax
      } = weights[id];
      const combineMaxMin = needMin && needMax && weights[id].combineMaxMin;
      this._renderToWeightsTexture({
        id,
        parameters,
        moduleSettings,
        uniforms,
        gridSize,
        attributes,
        weights
      });
      if (combineMaxMin) {
        this._renderToMaxMinTexture({
          id,
          parameters: {
            ...parameters,
            blendEquation: MAX_MIN_BLEND_EQUATION
          },
          gridSize,
          minOrMaxFb: maxMinFramebuffers[id],
          clearParams: {
            clearColor: [0, 0, 0, MAX_32_BIT_FLOAT]
          },
          combineMaxMin
        });
      } else {
        if (needMin) {
          this._renderToMaxMinTexture({
            id,
            parameters: {
              ...parameters,
              blendEquation: MIN_BLEND_EQUATION
            },
            gridSize,
            minOrMaxFb: minFramebuffers[id],
            clearParams: {
              clearColor: [MAX_32_BIT_FLOAT, MAX_32_BIT_FLOAT, MAX_32_BIT_FLOAT, 0]
            },
            combineMaxMin
          });
        }
        if (needMax) {
          this._renderToMaxMinTexture({
            id,
            parameters: {
              ...parameters,
              blendEquation: MAX_BLEND_EQUATION
            },
            gridSize,
            minOrMaxFb: maxFramebuffers[id],
            clearParams: {
              clearColor: [0, 0, 0, 0]
            },
            combineMaxMin
          });
        }
      }
    }
  }
  _renderToMaxMinTexture(opts) {
    const {
      id,
      parameters,
      gridSize,
      minOrMaxFb,
      combineMaxMin,
      clearParams = {}
    } = opts;
    const {
      framebuffers
    } = this.state;
    const {
      gl,
      allAggregationModel
    } = this;
    withParameters(gl, {
      ...clearParams,
      framebuffer: minOrMaxFb,
      viewport: [0, 0, gridSize[0], gridSize[1]]
    }, () => {
      gl.clear(16384);
      allAggregationModel.draw({
        parameters,
        uniforms: {
          uSampler: framebuffers[id].texture,
          gridSize,
          combineMaxMin
        }
      });
    });
  }
  _renderToWeightsTexture(opts) {
    const {
      id,
      parameters,
      moduleSettings,
      uniforms,
      gridSize,
      weights
    } = opts;
    const {
      framebuffers,
      equations,
      weightAttributes
    } = this.state;
    const {
      gl,
      gridAggregationModel
    } = this;
    const {
      operation
    } = weights[id];
    const clearColor = operation === AGGREGATION_OPERATION.MIN ? [MAX_32_BIT_FLOAT, MAX_32_BIT_FLOAT, MAX_32_BIT_FLOAT, 0] : [0, 0, 0, 0];
    withParameters(gl, {
      framebuffer: framebuffers[id],
      viewport: [0, 0, gridSize[0], gridSize[1]],
      clearColor
    }, () => {
      gl.clear(16384);
      const attributes = {
        weights: weightAttributes[id]
      };
      gridAggregationModel.draw({
        parameters: {
          ...parameters,
          blendEquation: equations[id]
        },
        moduleSettings,
        uniforms,
        attributes
      });
    });
    if (operation === AGGREGATION_OPERATION.MEAN) {
      const {
        meanTextures,
        textures
      } = this.state;
      const transformOptions = {
        _sourceTextures: {
          aggregationValues: meanTextures[id]
        },
        _targetTexture: textures[id],
        elementCount: textures[id].width * textures[id].height
      };
      if (this.meanTransform) {
        this.meanTransform.update(transformOptions);
      } else {
        this.meanTransform = getMeanTransform(gl, transformOptions);
      }
      this.meanTransform.run({
        parameters: {
          blend: false,
          depthTest: false
        }
      });
      framebuffers[id].attach({
        [36064]: textures[id]
      });
    }
  }
  _runAggregation(opts) {
    this._updateModels(opts);
    this._setupFramebuffers(opts);
    this._renderAggregateData(opts);
    const results = this._getAggregateData(opts);
    this.setState({
      results
    });
    return results;
  }
  _setupFramebuffers(opts) {
    const {
      textures,
      framebuffers,
      maxMinFramebuffers,
      minFramebuffers,
      maxFramebuffers,
      meanTextures,
      equations
    } = this.state;
    const {
      weights
    } = opts;
    const {
      numCol,
      numRow
    } = opts;
    const framebufferSize = {
      width: numCol,
      height: numRow
    };
    for (const id in weights) {
      const {
        needMin,
        needMax,
        combineMaxMin,
        operation
      } = weights[id];
      textures[id] = weights[id].aggregationTexture || textures[id] || getFloatTexture(this.gl, {
        id: "".concat(id, "-texture"),
        width: numCol,
        height: numRow
      });
      textures[id].resize(framebufferSize);
      let texture = textures[id];
      if (operation === AGGREGATION_OPERATION.MEAN) {
        meanTextures[id] = meanTextures[id] || getFloatTexture(this.gl, {
          id: "".concat(id, "-mean-texture"),
          width: numCol,
          height: numRow
        });
        meanTextures[id].resize(framebufferSize);
        texture = meanTextures[id];
      }
      if (framebuffers[id]) {
        framebuffers[id].attach({
          [36064]: texture
        });
      } else {
        framebuffers[id] = getFramebuffer(this.gl, {
          id: "".concat(id, "-fb"),
          width: numCol,
          height: numRow,
          texture
        });
      }
      framebuffers[id].resize(framebufferSize);
      equations[id] = EQUATION_MAP[operation] || EQUATION_MAP.SUM;
      if (needMin || needMax) {
        if (needMin && needMax && combineMaxMin) {
          if (!maxMinFramebuffers[id]) {
            texture = weights[id].maxMinTexture || this._getMinMaxTexture("".concat(id, "-maxMinTexture"));
            maxMinFramebuffers[id] = getFramebuffer(this.gl, {
              id: "".concat(id, "-maxMinFb"),
              texture
            });
          }
        } else {
          if (needMin) {
            if (!minFramebuffers[id]) {
              texture = weights[id].minTexture || this._getMinMaxTexture("".concat(id, "-minTexture"));
              minFramebuffers[id] = getFramebuffer(this.gl, {
                id: "".concat(id, "-minFb"),
                texture
              });
            }
          }
          if (needMax) {
            if (!maxFramebuffers[id]) {
              texture = weights[id].maxTexture || this._getMinMaxTexture("".concat(id, "-maxTexture"));
              maxFramebuffers[id] = getFramebuffer(this.gl, {
                id: "".concat(id, "-maxFb"),
                texture
              });
            }
          }
        }
      }
    }
  }
  _getMinMaxTexture(name) {
    const {
      resources
    } = this.state;
    if (!resources[name]) {
      resources[name] = getFloatTexture(this.gl, {
        id: "resourceName"
      });
    }
    return resources[name];
  }
  _setupModels({
    numCol = 0,
    numRow = 0
  } = {}) {
    var _this$gridAggregation;
    const {
      gl
    } = this;
    const {
      shaderOptions
    } = this.state;
    (_this$gridAggregation = this.gridAggregationModel) === null || _this$gridAggregation === void 0 ? void 0 : _this$gridAggregation.delete();
    this.gridAggregationModel = getAggregationModel(gl, shaderOptions);
    if (!this.allAggregationModel) {
      const instanceCount = numCol * numRow;
      this.allAggregationModel = getAllAggregationModel(gl, instanceCount);
    }
  }
  _setupWeightAttributes(opts) {
    const {
      weightAttributes
    } = this.state;
    const {
      weights
    } = opts;
    for (const id in weights) {
      weightAttributes[id] = opts.attributes[id];
    }
  }
  _trackGPUResultBuffers(results, weights) {
    const {
      resources
    } = this.state;
    for (const id in results) {
      if (results[id]) {
        for (const bufferName of BUFFER_NAMES) {
          if (results[id][bufferName] && weights[id][bufferName] !== results[id][bufferName]) {
            const name = "gpu-result-".concat(id, "-").concat(bufferName);
            if (resources[name]) {
              resources[name].delete();
            }
            resources[name] = results[id][bufferName];
          }
        }
      }
    }
  }
  _updateModels(opts) {
    const {
      vertexCount,
      attributes,
      numCol,
      numRow
    } = opts;
    const {
      modelDirty
    } = this.state;
    if (modelDirty) {
      this._setupModels(opts);
      this.setState({
        modelDirty: false
      });
    }
    this._setupWeightAttributes(opts);
    this.gridAggregationModel.setVertexCount(vertexCount);
    this.gridAggregationModel.setAttributes(attributes);
    this.allAggregationModel.setInstanceCount(numCol * numRow);
  }
};
function normalizeWeightParams(weights) {
  const result = {};
  for (const id in weights) {
    result[id] = {
      ...DEFAULT_WEIGHT_PARAMS,
      ...weights[id]
    };
  }
  return result;
}
function deleteResources(resources) {
  resources = Array.isArray(resources) ? resources : [resources];
  resources.forEach((obj) => {
    for (const name in obj) {
      obj[name].delete();
    }
  });
}
function getAggregationModel(gl, shaderOptions) {
  const shaders = mergeShaders({
    vs: aggregate_to_grid_vs_glsl_default,
    fs: aggregate_to_grid_fs_glsl_default,
    modules: [fp64arithmetic, project32_default]
  }, shaderOptions);
  return new Model(gl, {
    id: "Gird-Aggregation-Model",
    vertexCount: 1,
    drawMode: 0,
    ...shaders
  });
}
function getAllAggregationModel(gl, instanceCount) {
  return new Model(gl, {
    id: "All-Aggregation-Model",
    vs: aggregate_all_vs_glsl_default,
    fs: aggregate_all_fs_glsl_default,
    modules: [fp64arithmetic],
    vertexCount: 1,
    drawMode: 0,
    isInstanced: true,
    instanceCount,
    attributes: {
      position: [0, 0]
    }
  });
}
function getMeanTransform(gl, opts) {
  return new Transform(gl, {
    vs: transform_mean_vs_glsl_default,
    _targetTextureVarying: "meanValues",
    ...opts
  });
}

// node_modules/@deck.gl/aggregation-layers/dist/esm/utils/color-utils.js
var defaultColorRange = [[255, 255, 178], [254, 217, 118], [254, 178, 76], [253, 141, 60], [240, 59, 32], [189, 0, 38]];
function colorRangeToFlatArray(colorRange, normalize = false, ArrayType = Float32Array) {
  let flatArray;
  if (Number.isFinite(colorRange[0])) {
    flatArray = new ArrayType(colorRange);
  } else {
    flatArray = new ArrayType(colorRange.length * 4);
    let index = 0;
    for (let i = 0; i < colorRange.length; i++) {
      const color = colorRange[i];
      flatArray[index++] = color[0];
      flatArray[index++] = color[1];
      flatArray[index++] = color[2];
      flatArray[index++] = Number.isFinite(color[3]) ? color[3] : 255;
    }
  }
  if (normalize) {
    for (let i = 0; i < flatArray.length; i++) {
      flatArray[i] /= 255;
    }
  }
  return flatArray;
}

// node_modules/@deck.gl/aggregation-layers/dist/esm/screen-grid-layer/screen-grid-layer-vertex.glsl.js
var screen_grid_layer_vertex_glsl_default = "#define SHADER_NAME screen-grid-layer-vertex-shader\n#define RANGE_COUNT 6\n\nattribute vec3 positions;\nattribute vec3 instancePositions;\nattribute vec4 instanceCounts;\nattribute vec3 instancePickingColors;\n\nuniform float opacity;\nuniform vec3 cellScale;\nuniform vec4 minColor;\nuniform vec4 maxColor;\nuniform vec4 colorRange[RANGE_COUNT];\nuniform vec2 colorDomain;\nuniform bool shouldUseMinMax;\nuniform sampler2D maxTexture;\n\nvarying vec4 vColor;\nvarying float vSampleCount;\n\nvec4 quantizeScale(vec2 domain, vec4 range[RANGE_COUNT], float value) {\n  vec4 outColor = vec4(0., 0., 0., 0.);\n  if (value >= domain.x && value <= domain.y) {\n    float domainRange = domain.y - domain.x;\n    if (domainRange <= 0.) {\n      outColor = colorRange[0];\n    } else {\n      float rangeCount = float(RANGE_COUNT);\n      float rangeStep = domainRange / rangeCount;\n      float idx = floor((value - domain.x) / rangeStep);\n      idx = clamp(idx, 0., rangeCount - 1.);\n      int intIdx = int(idx);\n      outColor = colorRange[intIdx];\n    }\n  }\n  outColor = outColor / 255.;\n  return outColor;\n}\n\nvoid main(void) {\n  vSampleCount = instanceCounts.a;\n\n  float weight = instanceCounts.r;\n  float maxWeight = texture2D(maxTexture, vec2(0.5)).r;\n\n  float step = weight / maxWeight;\n  vec4 minMaxColor = mix(minColor, maxColor, step) / 255.;\n\n  vec2 domain = colorDomain;\n  float domainMaxValid = float(colorDomain.y != 0.);\n  domain.y = mix(maxWeight, colorDomain.y, domainMaxValid);\n  vec4 rangeColor = quantizeScale(domain, colorRange, weight);\n\n  float rangeMinMax = float(shouldUseMinMax);\n  vec4 color = mix(rangeColor, minMaxColor, rangeMinMax);\n  vColor = vec4(color.rgb, color.a * opacity);\n  picking_setPickingColor(instancePickingColors);\n\n  gl_Position = vec4(instancePositions + positions * cellScale, 1.);\n}\n";

// node_modules/@deck.gl/aggregation-layers/dist/esm/screen-grid-layer/screen-grid-layer-fragment.glsl.js
var screen_grid_layer_fragment_glsl_default = "#define SHADER_NAME screen-grid-layer-fragment-shader\n\nprecision highp float;\n\nvarying vec4 vColor;\nvarying float vSampleCount;\n\nvoid main(void) {\n  if (vSampleCount <= 0.0) {\n    discard;\n  }\n  gl_FragColor = vColor;\n\n  DECKGL_FILTER_COLOR(gl_FragColor, geometry);\n}\n";

// node_modules/@deck.gl/aggregation-layers/dist/esm/screen-grid-layer/screen-grid-cell-layer.js
var DEFAULT_MINCOLOR = [0, 0, 0, 0];
var DEFAULT_MAXCOLOR = [0, 255, 0, 255];
var COLOR_PROPS = ["minColor", "maxColor", "colorRange", "colorDomain"];
var defaultProps = {
  cellSizePixels: {
    value: 100,
    min: 1
  },
  cellMarginPixels: {
    value: 2,
    min: 0,
    max: 5
  },
  colorDomain: null,
  colorRange: defaultColorRange
};
var ScreenGridCellLayer = class extends Layer {
  constructor(...args) {
    super(...args);
    _defineProperty(this, "state", void 0);
  }
  static isSupported(gl) {
    return hasFeatures(gl, [FEATURES.TEXTURE_FLOAT]);
  }
  getShaders() {
    return {
      vs: screen_grid_layer_vertex_glsl_default,
      fs: screen_grid_layer_fragment_glsl_default,
      modules: [picking_default]
    };
  }
  initializeState() {
    const {
      gl
    } = this.context;
    const attributeManager = this.getAttributeManager();
    attributeManager.addInstanced({
      instancePositions: {
        size: 3,
        update: this.calculateInstancePositions
      },
      instanceCounts: {
        size: 4,
        noAlloc: true
      }
    });
    this.setState({
      model: this._getModel(gl)
    });
  }
  shouldUpdateState({
    changeFlags
  }) {
    return changeFlags.somethingChanged;
  }
  updateState(params) {
    super.updateState(params);
    const {
      oldProps,
      props,
      changeFlags
    } = params;
    const attributeManager = this.getAttributeManager();
    if (props.numInstances !== oldProps.numInstances) {
      attributeManager.invalidateAll();
    } else if (oldProps.cellSizePixels !== props.cellSizePixels) {
      attributeManager.invalidate("instancePositions");
    }
    this._updateUniforms(oldProps, props, changeFlags);
  }
  draw({
    uniforms
  }) {
    const {
      parameters,
      maxTexture
    } = this.props;
    const minColor = this.props.minColor || DEFAULT_MINCOLOR;
    const maxColor = this.props.maxColor || DEFAULT_MAXCOLOR;
    const colorDomain = this.props.colorDomain || [1, 0];
    const {
      model
    } = this.state;
    model.setUniforms(uniforms).setUniforms({
      minColor,
      maxColor,
      maxTexture,
      colorDomain
    }).draw({
      parameters: {
        depthTest: false,
        depthMask: false,
        ...parameters
      }
    });
  }
  calculateInstancePositions(attribute, {
    numInstances
  }) {
    const {
      width,
      height
    } = this.context.viewport;
    const {
      cellSizePixels
    } = this.props;
    const numCol = Math.ceil(width / cellSizePixels);
    const {
      value,
      size
    } = attribute;
    for (let i = 0; i < numInstances; i++) {
      const x = i % numCol;
      const y = Math.floor(i / numCol);
      value[i * size + 0] = x * cellSizePixels / width * 2 - 1;
      value[i * size + 1] = 1 - y * cellSizePixels / height * 2;
      value[i * size + 2] = 0;
    }
  }
  _getModel(gl) {
    return new Model(gl, {
      ...this.getShaders(),
      id: this.props.id,
      geometry: new Geometry({
        drawMode: 6,
        attributes: {
          positions: new Float32Array([0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0])
        }
      }),
      isInstanced: true
    });
  }
  _shouldUseMinMax() {
    const {
      minColor,
      maxColor,
      colorDomain,
      colorRange
    } = this.props;
    if (minColor || maxColor) {
      log_default.deprecated("ScreenGridLayer props: minColor and maxColor", "colorRange, colorDomain")();
      return true;
    }
    if (colorDomain || colorRange) {
      return false;
    }
    return true;
  }
  _updateUniforms(oldProps, props, changeFlags) {
    const {
      model
    } = this.state;
    if (COLOR_PROPS.some((key) => oldProps[key] !== props[key])) {
      model.setUniforms({
        shouldUseMinMax: this._shouldUseMinMax()
      });
    }
    if (oldProps.colorRange !== props.colorRange) {
      model.setUniforms({
        colorRange: colorRangeToFlatArray(props.colorRange)
      });
    }
    if (oldProps.cellMarginPixels !== props.cellMarginPixels || oldProps.cellSizePixels !== props.cellSizePixels || changeFlags.viewportChanged) {
      const {
        width,
        height
      } = this.context.viewport;
      const {
        cellSizePixels,
        cellMarginPixels
      } = this.props;
      const margin = cellSizePixels > cellMarginPixels ? cellMarginPixels : 0;
      const cellScale = new Float32Array([(cellSizePixels - margin) / width * 2, -(cellSizePixels - margin) / height * 2, 1]);
      model.setUniforms({
        cellScale
      });
    }
  }
};
_defineProperty(ScreenGridCellLayer, "layerName", "ScreenGridCellLayer");
_defineProperty(ScreenGridCellLayer, "defaultProps", defaultProps);

// node_modules/@deck.gl/aggregation-layers/dist/esm/utils/prop-utils.js
function filterProps(props, filterKeys) {
  const filteredProps = {};
  for (const key in props) {
    if (!filterKeys.includes(key)) {
      filteredProps[key] = props[key];
    }
  }
  return filteredProps;
}

// node_modules/@deck.gl/aggregation-layers/dist/esm/aggregation-layer.js
var AggregationLayer = class extends CompositeLayer {
  constructor(...args) {
    super(...args);
    _defineProperty(this, "state", void 0);
  }
  initializeAggregationLayer(dimensions) {
    super.initializeState(this.context);
    this.setState({
      ignoreProps: filterProps(this.constructor._propTypes, dimensions.data.props),
      dimensions
    });
  }
  updateState(opts) {
    super.updateState(opts);
    const {
      changeFlags
    } = opts;
    if (changeFlags.extensionsChanged) {
      const shaders = this.getShaders({});
      if (shaders && shaders.defines) {
        shaders.defines.NON_INSTANCED_MODEL = 1;
      }
      this.updateShaders(shaders);
    }
    this._updateAttributes();
  }
  updateAttributes(changedAttributes) {
    this.setState({
      changedAttributes
    });
  }
  getAttributes() {
    return this.getAttributeManager().getShaderAttributes();
  }
  getModuleSettings() {
    const {
      viewport,
      mousePosition,
      gl
    } = this.context;
    const moduleSettings = Object.assign(Object.create(this.props), {
      viewport,
      mousePosition,
      pickingActive: 0,
      devicePixelRatio: cssToDeviceRatio(gl)
    });
    return moduleSettings;
  }
  updateShaders(shaders) {
  }
  isAggregationDirty(updateOpts, params = {}) {
    const {
      props,
      oldProps,
      changeFlags
    } = updateOpts;
    const {
      compareAll = false,
      dimension
    } = params;
    const {
      ignoreProps
    } = this.state;
    const {
      props: dataProps,
      accessors = []
    } = dimension;
    const {
      updateTriggersChanged
    } = changeFlags;
    if (changeFlags.dataChanged) {
      return true;
    }
    if (updateTriggersChanged) {
      if (updateTriggersChanged.all) {
        return true;
      }
      for (const accessor of accessors) {
        if (updateTriggersChanged[accessor]) {
          return true;
        }
      }
    }
    if (compareAll) {
      if (changeFlags.extensionsChanged) {
        return true;
      }
      return compareProps({
        oldProps,
        newProps: props,
        ignoreProps,
        propTypes: this.constructor._propTypes
      });
    }
    for (const name of dataProps) {
      if (props[name] !== oldProps[name]) {
        return true;
      }
    }
    return false;
  }
  isAttributeChanged(name) {
    const {
      changedAttributes
    } = this.state;
    if (!name) {
      return !isObjectEmpty(changedAttributes);
    }
    return changedAttributes && changedAttributes[name] !== void 0;
  }
  _getAttributeManager() {
    return new AttributeManager(this.context.gl, {
      id: this.props.id,
      stats: this.context.stats
    });
  }
};
_defineProperty(AggregationLayer, "layerName", "AggregationLayer");
function isObjectEmpty(obj) {
  let isEmpty = true;
  for (const key in obj) {
    isEmpty = false;
    break;
  }
  return isEmpty;
}

// node_modules/@deck.gl/aggregation-layers/dist/esm/utils/scale-utils.js
function getScale(domain, range, scaleFunction) {
  const scale = scaleFunction;
  scale.domain = () => domain;
  scale.range = () => range;
  return scale;
}
function getQuantizeScale(domain, range) {
  const scaleFunction = (value) => quantizeScale(domain, range, value);
  return getScale(domain, range, scaleFunction);
}
function getLinearScale(domain, range) {
  const scaleFunction = (value) => linearScale(domain, range, value);
  return getScale(domain, range, scaleFunction);
}
function getQuantileScale(domain, range) {
  const sortedDomain = domain.sort(ascending);
  let i = 0;
  const n = Math.max(1, range.length);
  const thresholds = new Array(n - 1);
  while (++i < n) {
    thresholds[i - 1] = threshold(sortedDomain, i / n);
  }
  const scaleFunction = (value) => thresholdsScale(thresholds, range, value);
  scaleFunction.thresholds = () => thresholds;
  return getScale(domain, range, scaleFunction);
}
function ascending(a, b) {
  return a - b;
}
function threshold(domain, fraction) {
  const domainLength = domain.length;
  if (fraction <= 0 || domainLength < 2) {
    return domain[0];
  }
  if (fraction >= 1) {
    return domain[domainLength - 1];
  }
  const domainFraction = (domainLength - 1) * fraction;
  const lowIndex = Math.floor(domainFraction);
  const low = domain[lowIndex];
  const high = domain[lowIndex + 1];
  return low + (high - low) * (domainFraction - lowIndex);
}
function bisectRight(a, x) {
  let lo = 0;
  let hi = a.length;
  while (lo < hi) {
    const mid = lo + hi >>> 1;
    if (ascending(a[mid], x) > 0) {
      hi = mid;
    } else {
      lo = mid + 1;
    }
  }
  return lo;
}
function thresholdsScale(thresholds, range, value) {
  return range[bisectRight(thresholds, value)];
}
function ordinalScale(domain, domainMap, range, value) {
  const key = "".concat(value);
  let d = domainMap.get(key);
  if (d === void 0) {
    d = domain.push(value);
    domainMap.set(key, d);
  }
  return range[(d - 1) % range.length];
}
function getOrdinalScale(domain, range) {
  const domainMap = /* @__PURE__ */ new Map();
  const uniqueDomain = [];
  for (const d of domain) {
    const key = "".concat(d);
    if (!domainMap.has(key)) {
      domainMap.set(key, uniqueDomain.push(d));
    }
  }
  const scaleFunction = (value) => ordinalScale(uniqueDomain, domainMap, range, value);
  return getScale(domain, range, scaleFunction);
}
function quantizeScale(domain, range, value) {
  const domainRange = domain[1] - domain[0];
  if (domainRange <= 0) {
    log_default.warn("quantizeScale: invalid domain, returning range[0]")();
    return range[0];
  }
  const step = domainRange / range.length;
  const idx = Math.floor((value - domain[0]) / step);
  const clampIdx = Math.max(Math.min(idx, range.length - 1), 0);
  return range[clampIdx];
}
function linearScale(domain, range, value) {
  return (value - domain[0]) / (domain[1] - domain[0]) * (range[1] - range[0]) + range[0];
}
function notNullOrUndefined(d) {
  return d !== void 0 && d !== null;
}
function unique(values) {
  const results = [];
  values.forEach((v) => {
    if (!results.includes(v) && notNullOrUndefined(v)) {
      results.push(v);
    }
  });
  return results;
}
function getTruthyValues(data, valueAccessor) {
  const values = typeof valueAccessor === "function" ? data.map(valueAccessor) : data;
  return values.filter(notNullOrUndefined);
}
function getQuantileDomain(data, valueAccessor) {
  return getTruthyValues(data, valueAccessor);
}
function getOrdinalDomain(data, valueAccessor) {
  return unique(getTruthyValues(data, valueAccessor));
}
function clamp(value, min, max) {
  return Math.max(min, Math.min(max, value));
}
function getScaleFunctionByScaleType(scaleType) {
  switch (scaleType) {
    case "quantize":
      return getQuantizeScale;
    case "linear":
      return getLinearScale;
    case "quantile":
      return getQuantileScale;
    case "ordinal":
      return getOrdinalScale;
    default:
      return getQuantizeScale;
  }
}

// node_modules/@deck.gl/aggregation-layers/dist/esm/utils/bin-sorter.js
var defaultGetValue = (points) => points.length;
var MAX_32_BIT_FLOAT2 = 3402823466e29;
var defaultGetPoints = (bin) => bin.points;
var defaultGetIndex = (bin) => bin.index;
var ascending2 = (a, b) => a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;
var defaultProps2 = {
  getValue: defaultGetValue,
  getPoints: defaultGetPoints,
  getIndex: defaultGetIndex,
  filterData: null
};
var BinSorter = class {
  constructor(bins = [], props = defaultProps2) {
    _defineProperty(this, "maxCount", void 0);
    _defineProperty(this, "maxValue", void 0);
    _defineProperty(this, "minValue", void 0);
    _defineProperty(this, "totalCount", void 0);
    _defineProperty(this, "aggregatedBins", void 0);
    _defineProperty(this, "sortedBins", void 0);
    _defineProperty(this, "binMap", void 0);
    this.aggregatedBins = this.getAggregatedBins(bins, props);
    this._updateMinMaxValues();
    this.binMap = this.getBinMap();
  }
  getAggregatedBins(bins, props) {
    const {
      getValue = defaultGetValue,
      getPoints = defaultGetPoints,
      getIndex = defaultGetIndex,
      filterData
    } = props;
    const hasFilter = typeof filterData === "function";
    const binCount = bins.length;
    const aggregatedBins = [];
    let index = 0;
    for (let binIndex = 0; binIndex < binCount; binIndex++) {
      const bin = bins[binIndex];
      const points = getPoints(bin);
      const i = getIndex(bin);
      const filteredPoints = hasFilter ? points.filter(filterData) : points;
      bin.filteredPoints = hasFilter ? filteredPoints : null;
      const value = filteredPoints.length ? getValue(filteredPoints) : null;
      if (value !== null && value !== void 0) {
        aggregatedBins[index] = {
          i: Number.isFinite(i) ? i : binIndex,
          value,
          counts: filteredPoints.length
        };
        index++;
      }
    }
    return aggregatedBins;
  }
  _percentileToIndex(percentileRange) {
    const len = this.sortedBins.length;
    if (len < 2) {
      return [0, 0];
    }
    const [lower, upper] = percentileRange.map((n) => clamp(n, 0, 100));
    const lowerIdx = Math.ceil(lower / 100 * (len - 1));
    const upperIdx = Math.floor(upper / 100 * (len - 1));
    return [lowerIdx, upperIdx];
  }
  getBinMap() {
    const binMap = {};
    for (const bin of this.aggregatedBins) {
      binMap[bin.i] = bin;
    }
    return binMap;
  }
  _updateMinMaxValues() {
    let maxCount = 0;
    let maxValue = 0;
    let minValue = MAX_32_BIT_FLOAT2;
    let totalCount = 0;
    for (const x of this.aggregatedBins) {
      maxCount = maxCount > x.counts ? maxCount : x.counts;
      maxValue = maxValue > x.value ? maxValue : x.value;
      minValue = minValue < x.value ? minValue : x.value;
      totalCount += x.counts;
    }
    this.maxCount = maxCount;
    this.maxValue = maxValue;
    this.minValue = minValue;
    this.totalCount = totalCount;
  }
  getValueRange(percentileRange) {
    if (!this.sortedBins) {
      this.sortedBins = this.aggregatedBins.sort((a, b) => ascending2(a.value, b.value));
    }
    if (!this.sortedBins.length) {
      return [];
    }
    let lowerIdx = 0;
    let upperIdx = this.sortedBins.length - 1;
    if (Array.isArray(percentileRange)) {
      const idxRange = this._percentileToIndex(percentileRange);
      lowerIdx = idxRange[0];
      upperIdx = idxRange[1];
    }
    return [this.sortedBins[lowerIdx].value, this.sortedBins[upperIdx].value];
  }
  getValueDomainByScale(scale, [lower = 0, upper = 100] = []) {
    if (!this.sortedBins) {
      this.sortedBins = this.aggregatedBins.sort((a, b) => ascending2(a.value, b.value));
    }
    if (!this.sortedBins.length) {
      return [];
    }
    const indexEdge = this._percentileToIndex([lower, upper]);
    return this._getScaleDomain(scale, indexEdge);
  }
  _getScaleDomain(scaleType, [lowerIdx, upperIdx]) {
    const bins = this.sortedBins;
    switch (scaleType) {
      case "quantize":
      case "linear":
        return [bins[lowerIdx].value, bins[upperIdx].value];
      case "quantile":
        return getQuantileDomain(bins.slice(lowerIdx, upperIdx + 1), (d) => d.value);
      case "ordinal":
        return getOrdinalDomain(bins, (d) => d.value);
      default:
        return [bins[lowerIdx].value, bins[upperIdx].value];
    }
  }
};

// node_modules/@deck.gl/aggregation-layers/dist/esm/utils/grid-aggregation-utils.js
var R_EARTH = 6378e3;
function toFinite(n) {
  return Number.isFinite(n) ? n : 0;
}
function getBoundingBox(attributes, vertexCount) {
  const positions = attributes.positions.value;
  let yMin = Infinity;
  let yMax = -Infinity;
  let xMin = Infinity;
  let xMax = -Infinity;
  let y;
  let x;
  for (let i = 0; i < vertexCount; i++) {
    x = positions[i * 3];
    y = positions[i * 3 + 1];
    yMin = y < yMin ? y : yMin;
    yMax = y > yMax ? y : yMax;
    xMin = x < xMin ? x : xMin;
    xMax = x > xMax ? x : xMax;
  }
  const boundingBox = {
    xMin: toFinite(xMin),
    xMax: toFinite(xMax),
    yMin: toFinite(yMin),
    yMax: toFinite(yMax)
  };
  return boundingBox;
}
function getTranslation(boundingBox, gridOffset, coordinateSystem, viewport) {
  const {
    width,
    height
  } = viewport;
  const worldOrigin = coordinateSystem === COORDINATE_SYSTEM.CARTESIAN ? [-width / 2, -height / 2] : [-180, -90];
  log_default.assert(coordinateSystem === COORDINATE_SYSTEM.CARTESIAN || coordinateSystem === COORDINATE_SYSTEM.LNGLAT || coordinateSystem === COORDINATE_SYSTEM.DEFAULT);
  const {
    xMin,
    yMin
  } = boundingBox;
  return [-1 * (alignToCell(xMin - worldOrigin[0], gridOffset.xOffset) + worldOrigin[0]), -1 * (alignToCell(yMin - worldOrigin[1], gridOffset.yOffset) + worldOrigin[1])];
}
function alignToCell(inValue, cellSize) {
  const sign = inValue < 0 ? -1 : 1;
  let value = sign < 0 ? Math.abs(inValue) + cellSize : Math.abs(inValue);
  value = Math.floor(value / cellSize) * cellSize;
  return value * sign;
}
function getGridOffset(boundingBox, cellSize, convertToMeters = true) {
  if (!convertToMeters) {
    return {
      xOffset: cellSize,
      yOffset: cellSize
    };
  }
  const {
    yMin,
    yMax
  } = boundingBox;
  const centerLat = (yMin + yMax) / 2;
  return calculateGridLatLonOffset(cellSize, centerLat);
}
function getGridParams(boundingBox, cellSize, viewport, coordinateSystem) {
  const gridOffset = getGridOffset(boundingBox, cellSize, coordinateSystem !== COORDINATE_SYSTEM.CARTESIAN);
  const translation = getTranslation(boundingBox, gridOffset, coordinateSystem, viewport);
  const {
    xMin,
    yMin,
    xMax,
    yMax
  } = boundingBox;
  const width = xMax - xMin + gridOffset.xOffset;
  const height = yMax - yMin + gridOffset.yOffset;
  const numCol = Math.ceil(width / gridOffset.xOffset);
  const numRow = Math.ceil(height / gridOffset.yOffset);
  return {
    gridOffset,
    translation,
    width,
    height,
    numCol,
    numRow
  };
}
function calculateGridLatLonOffset(cellSize, latitude) {
  const yOffset = calculateLatOffset(cellSize);
  const xOffset = calculateLonOffset(latitude, cellSize);
  return {
    yOffset,
    xOffset
  };
}
function calculateLatOffset(dy) {
  return dy / R_EARTH * (180 / Math.PI);
}
function calculateLonOffset(lat, dx) {
  return dx / R_EARTH * (180 / Math.PI) / Math.cos(lat * Math.PI / 180);
}

// node_modules/@deck.gl/aggregation-layers/dist/esm/cpu-grid-layer/grid-aggregator.js
function pointToDensityGridDataCPU(props, aggregationParams) {
  const hashInfo = pointsToGridHashing(props, aggregationParams);
  const result = getGridLayerDataFromGridHash(hashInfo);
  return {
    gridHash: hashInfo.gridHash,
    gridOffset: hashInfo.gridOffset,
    data: result
  };
}
function pointsToGridHashing(props, aggregationParams) {
  const {
    data = [],
    cellSize
  } = props;
  const {
    attributes,
    viewport,
    projectPoints,
    numInstances
  } = aggregationParams;
  const positions = attributes.positions.value;
  const {
    size
  } = attributes.positions.getAccessor();
  const boundingBox = aggregationParams.boundingBox || getPositionBoundingBox(attributes.positions, numInstances);
  const offsets = aggregationParams.posOffset || [180, 90];
  const gridOffset = aggregationParams.gridOffset || getGridOffset(boundingBox, cellSize);
  if (gridOffset.xOffset <= 0 || gridOffset.yOffset <= 0) {
    return {
      gridHash: {},
      gridOffset
    };
  }
  const {
    width,
    height
  } = viewport;
  const numCol = Math.ceil(width / gridOffset.xOffset);
  const numRow = Math.ceil(height / gridOffset.yOffset);
  const gridHash = {};
  const {
    iterable,
    objectInfo
  } = createIterable(data);
  const position = new Array(3);
  for (const pt of iterable) {
    objectInfo.index++;
    position[0] = positions[objectInfo.index * size];
    position[1] = positions[objectInfo.index * size + 1];
    position[2] = size >= 3 ? positions[objectInfo.index * size + 2] : 0;
    const [x, y] = projectPoints ? viewport.project(position) : position;
    if (Number.isFinite(x) && Number.isFinite(y)) {
      const yIndex = Math.floor((y + offsets[1]) / gridOffset.yOffset);
      const xIndex = Math.floor((x + offsets[0]) / gridOffset.xOffset);
      if (!projectPoints || xIndex >= 0 && xIndex < numCol && yIndex >= 0 && yIndex < numRow) {
        const key = "".concat(yIndex, "-").concat(xIndex);
        gridHash[key] = gridHash[key] || {
          count: 0,
          points: [],
          lonIdx: xIndex,
          latIdx: yIndex
        };
        gridHash[key].count += 1;
        gridHash[key].points.push({
          source: pt,
          index: objectInfo.index
        });
      }
    }
  }
  return {
    gridHash,
    gridOffset,
    offsets: [offsets[0] * -1, offsets[1] * -1]
  };
}
function getGridLayerDataFromGridHash({
  gridHash,
  gridOffset,
  offsets
}) {
  const data = new Array(Object.keys(gridHash).length);
  let i = 0;
  for (const key in gridHash) {
    const idxs = key.split("-");
    const latIdx = parseInt(idxs[0], 10);
    const lonIdx = parseInt(idxs[1], 10);
    const index = i++;
    data[index] = {
      index,
      position: [offsets[0] + gridOffset.xOffset * lonIdx, offsets[1] + gridOffset.yOffset * latIdx],
      ...gridHash[key]
    };
  }
  return data;
}
function getPositionBoundingBox(positionAttribute, numInstance) {
  const positions = positionAttribute.value;
  const {
    size
  } = positionAttribute.getAccessor();
  let yMin = Infinity;
  let yMax = -Infinity;
  let xMin = Infinity;
  let xMax = -Infinity;
  let y;
  let x;
  for (let i = 0; i < numInstance; i++) {
    x = positions[i * size];
    y = positions[i * size + 1];
    if (Number.isFinite(x) && Number.isFinite(y)) {
      yMin = y < yMin ? y : yMin;
      yMax = y > yMax ? y : yMax;
      xMin = x < xMin ? x : xMin;
      xMax = x > xMax ? x : xMax;
    }
  }
  return {
    xMin,
    xMax,
    yMin,
    yMax
  };
}

// node_modules/@deck.gl/aggregation-layers/dist/esm/grid-aggregation-layer.js
var GridAggregationLayer = class extends AggregationLayer {
  constructor(...args) {
    super(...args);
    _defineProperty(this, "state", void 0);
  }
  initializeAggregationLayer({
    dimensions
  }) {
    const {
      gl
    } = this.context;
    super.initializeAggregationLayer(dimensions);
    this.setState({
      layerData: {},
      gpuGridAggregator: new GPUGridAggregator(gl, {
        id: "".concat(this.id, "-gpu-aggregator")
      }),
      cpuGridAggregator: pointToDensityGridDataCPU
    });
  }
  updateState(opts) {
    super.updateState(opts);
    this.updateAggregationState(opts);
    const {
      aggregationDataDirty,
      aggregationWeightsDirty,
      gpuAggregation
    } = this.state;
    if (this.getNumInstances() <= 0) {
      return;
    }
    let aggregationDirty = false;
    if (aggregationDataDirty || gpuAggregation && aggregationWeightsDirty) {
      this._updateAggregation(opts);
      aggregationDirty = true;
    }
    if (!gpuAggregation && (aggregationDataDirty || aggregationWeightsDirty)) {
      this._updateWeightBins();
      this._uploadAggregationResults();
      aggregationDirty = true;
    }
    this.setState({
      aggregationDirty
    });
  }
  finalizeState(context) {
    var _this$state$gpuGridAg;
    const {
      count
    } = this.state.weights;
    if (count && count.aggregationBuffer) {
      count.aggregationBuffer.delete();
    }
    (_this$state$gpuGridAg = this.state.gpuGridAggregator) === null || _this$state$gpuGridAg === void 0 ? void 0 : _this$state$gpuGridAg.delete();
    super.finalizeState(context);
  }
  updateShaders(shaders) {
    if (this.state.gpuAggregation) {
      this.state.gpuGridAggregator.updateShaders(shaders);
    }
  }
  updateAggregationState(opts) {
    log_default.assert(false);
  }
  allocateResources(numRow, numCol) {
    if (this.state.numRow !== numRow || this.state.numCol !== numCol) {
      const dataBytes = numCol * numRow * 4 * 4;
      const gl = this.context.gl;
      const {
        weights
      } = this.state;
      for (const name in weights) {
        const weight = weights[name];
        if (weight.aggregationBuffer) {
          weight.aggregationBuffer.delete();
        }
        weight.aggregationBuffer = new Buffer(gl, {
          byteLength: dataBytes,
          accessor: {
            size: 4,
            type: 5126,
            divisor: 1
          }
        });
      }
    }
  }
  updateResults({
    aggregationData,
    maxMinData,
    maxData,
    minData
  }) {
    const {
      count
    } = this.state.weights;
    if (count) {
      count.aggregationData = aggregationData;
      count.maxMinData = maxMinData;
      count.maxData = maxData;
      count.minData = minData;
    }
  }
  _updateAggregation(opts) {
    const {
      cpuGridAggregator,
      gpuGridAggregator,
      gridOffset,
      posOffset,
      translation = [0, 0],
      scaling = [0, 0, 0],
      boundingBox,
      projectPoints,
      gpuAggregation,
      numCol,
      numRow
    } = this.state;
    const {
      props
    } = opts;
    const {
      viewport
    } = this.context;
    const attributes = this.getAttributes();
    const vertexCount = this.getNumInstances();
    if (!gpuAggregation) {
      const result = cpuGridAggregator(props, {
        gridOffset,
        projectPoints,
        attributes,
        viewport,
        posOffset,
        boundingBox
      });
      this.setState({
        layerData: result
      });
    } else {
      const {
        weights
      } = this.state;
      gpuGridAggregator.run({
        weights,
        cellSize: [gridOffset.xOffset, gridOffset.yOffset],
        numCol,
        numRow,
        translation,
        scaling,
        vertexCount,
        projectPoints,
        attributes,
        moduleSettings: this.getModuleSettings()
      });
    }
  }
  _updateWeightBins() {
    const {
      getValue
    } = this.state;
    const sortedBins = new BinSorter(this.state.layerData.data || [], {
      getValue
    });
    this.setState({
      sortedBins
    });
  }
  _uploadAggregationResults() {
    const {
      numCol,
      numRow
    } = this.state;
    const {
      data
    } = this.state.layerData;
    const {
      aggregatedBins,
      minValue,
      maxValue,
      totalCount
    } = this.state.sortedBins;
    const ELEMENTCOUNT = 4;
    const aggregationSize = numCol * numRow * ELEMENTCOUNT;
    const aggregationData = new Float32Array(aggregationSize).fill(0);
    for (const bin of aggregatedBins) {
      const {
        lonIdx,
        latIdx
      } = data[bin.i];
      const {
        value,
        counts
      } = bin;
      const cellIndex = (lonIdx + latIdx * numCol) * ELEMENTCOUNT;
      aggregationData[cellIndex] = value;
      aggregationData[cellIndex + ELEMENTCOUNT - 1] = counts;
    }
    const maxMinData = new Float32Array([maxValue, 0, 0, minValue]);
    const maxData = new Float32Array([maxValue, 0, 0, totalCount]);
    const minData = new Float32Array([minValue, 0, 0, totalCount]);
    this.updateResults({
      aggregationData,
      maxMinData,
      maxData,
      minData
    });
  }
};
_defineProperty(GridAggregationLayer, "layerName", "GridAggregationLayer");

// node_modules/@deck.gl/aggregation-layers/dist/esm/screen-grid-layer/screen-grid-layer.js
var defaultProps3 = {
  ...ScreenGridCellLayer.defaultProps,
  getPosition: {
    type: "accessor",
    value: (d) => d.position
  },
  getWeight: {
    type: "accessor",
    value: 1
  },
  gpuAggregation: true,
  aggregation: "SUM"
};
var POSITION_ATTRIBUTE_NAME = "positions";
var DIMENSIONS = {
  data: {
    props: ["cellSizePixels"]
  },
  weights: {
    props: ["aggregation"],
    accessors: ["getWeight"]
  }
};
var ScreenGridLayer = class extends GridAggregationLayer {
  constructor(...args) {
    super(...args);
    _defineProperty(this, "state", void 0);
  }
  initializeState() {
    const {
      gl
    } = this.context;
    if (!ScreenGridCellLayer.isSupported(gl)) {
      this.setState({
        supported: false
      });
      log_default.error("ScreenGridLayer: ".concat(this.id, " is not supported on this browser"))();
      return;
    }
    super.initializeAggregationLayer({
      dimensions: DIMENSIONS,
      getCellSize: (props) => props.cellSizePixels
    });
    const weights = {
      count: {
        size: 1,
        operation: AGGREGATION_OPERATION.SUM,
        needMax: true,
        maxTexture: getFloatTexture(gl, {
          id: "".concat(this.id, "-max-texture")
        })
      }
    };
    this.setState({
      supported: true,
      projectPoints: true,
      weights,
      subLayerData: {
        attributes: {}
      },
      maxTexture: weights.count.maxTexture,
      positionAttributeName: "positions",
      posOffset: [0, 0],
      translation: [1, -1]
    });
    const attributeManager = this.getAttributeManager();
    attributeManager.add({
      [POSITION_ATTRIBUTE_NAME]: {
        size: 3,
        accessor: "getPosition",
        type: 5130,
        fp64: this.use64bitPositions()
      },
      count: {
        size: 3,
        accessor: "getWeight"
      }
    });
  }
  shouldUpdateState({
    changeFlags
  }) {
    return this.state.supported && changeFlags.somethingChanged;
  }
  updateState(opts) {
    super.updateState(opts);
  }
  renderLayers() {
    if (!this.state.supported) {
      return [];
    }
    const {
      maxTexture,
      numRow,
      numCol,
      weights
    } = this.state;
    const {
      updateTriggers
    } = this.props;
    const {
      aggregationBuffer
    } = weights.count;
    const CellLayerClass = this.getSubLayerClass("cells", ScreenGridCellLayer);
    return new CellLayerClass(this.props, this.getSubLayerProps({
      id: "cell-layer",
      updateTriggers
    }), {
      data: {
        attributes: {
          instanceCounts: aggregationBuffer
        }
      },
      maxTexture,
      numInstances: numRow * numCol
    });
  }
  finalizeState(context) {
    super.finalizeState(context);
    const {
      aggregationBuffer,
      maxBuffer,
      maxTexture
    } = this.state;
    aggregationBuffer === null || aggregationBuffer === void 0 ? void 0 : aggregationBuffer.delete();
    maxBuffer === null || maxBuffer === void 0 ? void 0 : maxBuffer.delete();
    maxTexture === null || maxTexture === void 0 ? void 0 : maxTexture.delete();
  }
  getPickingInfo({
    info
  }) {
    const {
      index
    } = info;
    if (index >= 0) {
      const {
        gpuGridAggregator,
        gpuAggregation,
        weights
      } = this.state;
      const aggregationResults = gpuAggregation ? gpuGridAggregator.getData("count") : weights.count;
      info.object = GPUGridAggregator.getAggregationData({
        pixelIndex: index,
        ...aggregationResults
      });
    }
    return info;
  }
  updateResults({
    aggregationData,
    maxData
  }) {
    const {
      count
    } = this.state.weights;
    count.aggregationData = aggregationData;
    count.aggregationBuffer.setData({
      data: aggregationData
    });
    count.maxData = maxData;
    count.maxTexture.setImageData({
      data: maxData
    });
  }
  updateAggregationState(opts) {
    const cellSize = opts.props.cellSizePixels;
    const cellSizeChanged = opts.oldProps.cellSizePixels !== cellSize;
    const {
      viewportChanged
    } = opts.changeFlags;
    let gpuAggregation = opts.props.gpuAggregation;
    if (this.state.gpuAggregation !== opts.props.gpuAggregation) {
      if (gpuAggregation && !GPUGridAggregator.isSupported(this.context.gl)) {
        log_default.warn("GPU Grid Aggregation not supported, falling back to CPU")();
        gpuAggregation = false;
      }
    }
    const gpuAggregationChanged = gpuAggregation !== this.state.gpuAggregation;
    this.setState({
      gpuAggregation
    });
    const positionsChanged = this.isAttributeChanged(POSITION_ATTRIBUTE_NAME);
    const {
      dimensions
    } = this.state;
    const {
      data,
      weights
    } = dimensions;
    const aggregationDataDirty = positionsChanged || gpuAggregationChanged || viewportChanged || this.isAggregationDirty(opts, {
      compareAll: gpuAggregation,
      dimension: data
    });
    const aggregationWeightsDirty = this.isAggregationDirty(opts, {
      dimension: weights
    });
    this.setState({
      aggregationDataDirty,
      aggregationWeightsDirty
    });
    const {
      viewport
    } = this.context;
    if (viewportChanged || cellSizeChanged) {
      const {
        width,
        height
      } = viewport;
      const numCol = Math.ceil(width / cellSize);
      const numRow = Math.ceil(height / cellSize);
      this.allocateResources(numRow, numCol);
      this.setState({
        scaling: [width / 2, -height / 2, 1],
        gridOffset: {
          xOffset: cellSize,
          yOffset: cellSize
        },
        width,
        height,
        numCol,
        numRow
      });
    }
    if (aggregationWeightsDirty) {
      this._updateAccessors(opts);
    }
    if (aggregationDataDirty || aggregationWeightsDirty) {
      this._resetResults();
    }
  }
  _updateAccessors(opts) {
    const {
      getWeight,
      aggregation,
      data
    } = opts.props;
    const {
      count
    } = this.state.weights;
    if (count) {
      count.getWeight = getWeight;
      count.operation = AGGREGATION_OPERATION[aggregation];
    }
    this.setState({
      getValue: getValueFunc(aggregation, getWeight, {
        data
      })
    });
  }
  _resetResults() {
    const {
      count
    } = this.state.weights;
    if (count) {
      count.aggregationData = null;
    }
  }
};
_defineProperty(ScreenGridLayer, "layerName", "ScreenGridLayer");
_defineProperty(ScreenGridLayer, "defaultProps", defaultProps3);

// node_modules/@deck.gl/aggregation-layers/dist/esm/utils/cpu-aggregator.js
function nop() {
}
var dimensionSteps = ["getBins", "getDomain", "getScaleFunc"];
var defaultDimensions = [{
  key: "fillColor",
  accessor: "getFillColor",
  pickingInfo: "colorValue",
  getBins: {
    triggers: {
      value: {
        prop: "getColorValue",
        updateTrigger: "getColorValue"
      },
      weight: {
        prop: "getColorWeight",
        updateTrigger: "getColorWeight"
      },
      aggregation: {
        prop: "colorAggregation"
      },
      filterData: {
        prop: "_filterData",
        updateTrigger: "_filterData"
      }
    }
  },
  getDomain: {
    triggers: {
      lowerPercentile: {
        prop: "lowerPercentile"
      },
      upperPercentile: {
        prop: "upperPercentile"
      },
      scaleType: {
        prop: "colorScaleType"
      }
    }
  },
  getScaleFunc: {
    triggers: {
      domain: {
        prop: "colorDomain"
      },
      range: {
        prop: "colorRange"
      }
    },
    onSet: {
      props: "onSetColorDomain"
    }
  },
  nullValue: [0, 0, 0, 0]
}, {
  key: "elevation",
  accessor: "getElevation",
  pickingInfo: "elevationValue",
  getBins: {
    triggers: {
      value: {
        prop: "getElevationValue",
        updateTrigger: "getElevationValue"
      },
      weight: {
        prop: "getElevationWeight",
        updateTrigger: "getElevationWeight"
      },
      aggregation: {
        prop: "elevationAggregation"
      },
      filterData: {
        prop: "_filterData",
        updateTrigger: "_filterData"
      }
    }
  },
  getDomain: {
    triggers: {
      lowerPercentile: {
        prop: "elevationLowerPercentile"
      },
      upperPercentile: {
        prop: "elevationUpperPercentile"
      },
      scaleType: {
        prop: "elevationScaleType"
      }
    }
  },
  getScaleFunc: {
    triggers: {
      domain: {
        prop: "elevationDomain"
      },
      range: {
        prop: "elevationRange"
      }
    },
    onSet: {
      props: "onSetElevationDomain"
    }
  },
  nullValue: -1
}];
var defaultGetCellSize = (props) => props.cellSize;
var CPUAggregator = class {
  constructor(opts) {
    this.state = {
      layerData: {},
      dimensions: {}
    };
    this.changeFlags = {};
    this.dimensionUpdaters = {};
    this._getCellSize = opts.getCellSize || defaultGetCellSize;
    this._getAggregator = opts.getAggregator;
    this._addDimension(opts.dimensions || defaultDimensions);
  }
  static defaultDimensions() {
    return defaultDimensions;
  }
  updateState(opts, aggregationParams) {
    const {
      oldProps,
      props,
      changeFlags
    } = opts;
    this.updateGetValueFuncs(oldProps, props, changeFlags);
    const reprojectNeeded = this.needsReProjectPoints(oldProps, props, changeFlags);
    let aggregationDirty = false;
    if (changeFlags.dataChanged || reprojectNeeded) {
      this.getAggregatedData(props, aggregationParams);
      aggregationDirty = true;
    } else {
      const dimensionChanges = this.getDimensionChanges(oldProps, props, changeFlags) || [];
      dimensionChanges.forEach((f) => typeof f === "function" && f());
      aggregationDirty = true;
    }
    this.setState({
      aggregationDirty
    });
    return this.state;
  }
  setState(updateObject) {
    this.state = {
      ...this.state,
      ...updateObject
    };
  }
  setDimensionState(key, updateObject) {
    this.setState({
      dimensions: {
        ...this.state.dimensions,
        [key]: {
          ...this.state.dimensions[key],
          ...updateObject
        }
      }
    });
  }
  normalizeResult(result = {}) {
    if (result.hexagons) {
      return {
        data: result.hexagons,
        ...result
      };
    } else if (result.layerData) {
      return {
        data: result.layerData,
        ...result
      };
    }
    return result;
  }
  getAggregatedData(props, aggregationParams) {
    const aggregator = this._getAggregator(props);
    const result = aggregator(props, aggregationParams);
    this.setState({
      layerData: this.normalizeResult(result)
    });
    this.changeFlags = {
      layerData: true
    };
    this.getSortedBins(props);
  }
  updateGetValueFuncs(oldProps, props, changeFlags) {
    for (const key in this.dimensionUpdaters) {
      const {
        value,
        weight,
        aggregation
      } = this.dimensionUpdaters[key].getBins.triggers;
      let getValue = props[value.prop];
      const getValueChanged = this.needUpdateDimensionStep(this.dimensionUpdaters[key].getBins, oldProps, props, changeFlags);
      if (getValueChanged) {
        if (getValue) {
          getValue = wrapGetValueFunc(getValue, {
            data: props.data
          });
        } else {
          getValue = getValueFunc(props[aggregation.prop], props[weight.prop], {
            data: props.data
          });
        }
      }
      if (getValue) {
        this.setDimensionState(key, {
          getValue
        });
      }
    }
  }
  needsReProjectPoints(oldProps, props, changeFlags) {
    return this._getCellSize(oldProps) !== this._getCellSize(props) || this._getAggregator(oldProps) !== this._getAggregator(props) || changeFlags.updateTriggersChanged && (changeFlags.updateTriggersChanged.all || changeFlags.updateTriggersChanged.getPosition);
  }
  addDimension(dimensions) {
    this._addDimension(dimensions);
  }
  _addDimension(dimensions = []) {
    dimensions.forEach((dimension) => {
      const {
        key
      } = dimension;
      this.dimensionUpdaters[key] = this.getDimensionUpdaters(dimension);
      this.state.dimensions[key] = {
        getValue: null,
        domain: null,
        sortedBins: null,
        scaleFunc: nop
      };
    });
  }
  getDimensionUpdaters({
    key,
    accessor,
    pickingInfo,
    getBins,
    getDomain,
    getScaleFunc,
    nullValue
  }) {
    return {
      key,
      accessor,
      pickingInfo,
      getBins: {
        updater: this.getDimensionSortedBins,
        ...getBins
      },
      getDomain: {
        updater: this.getDimensionValueDomain,
        ...getDomain
      },
      getScaleFunc: {
        updater: this.getDimensionScale,
        ...getScaleFunc
      },
      attributeAccessor: this.getSubLayerDimensionAttribute(key, nullValue)
    };
  }
  needUpdateDimensionStep(dimensionStep, oldProps, props, changeFlags) {
    return Object.values(dimensionStep.triggers).some((item) => {
      if (item.updateTrigger) {
        return changeFlags.dataChanged || changeFlags.updateTriggersChanged && (changeFlags.updateTriggersChanged.all || changeFlags.updateTriggersChanged[item.updateTrigger]);
      }
      return oldProps[item.prop] !== props[item.prop];
    });
  }
  getDimensionChanges(oldProps, props, changeFlags) {
    const updaters = [];
    for (const key in this.dimensionUpdaters) {
      const needUpdate = dimensionSteps.find((step) => this.needUpdateDimensionStep(this.dimensionUpdaters[key][step], oldProps, props, changeFlags));
      if (needUpdate) {
        updaters.push(this.dimensionUpdaters[key][needUpdate].updater.bind(this, props, this.dimensionUpdaters[key]));
      }
    }
    return updaters.length ? updaters : null;
  }
  getUpdateTriggers(props) {
    const _updateTriggers = props.updateTriggers || {};
    const updateTriggers = {};
    for (const key in this.dimensionUpdaters) {
      const {
        accessor
      } = this.dimensionUpdaters[key];
      updateTriggers[accessor] = {};
      dimensionSteps.forEach((step) => {
        Object.values(this.dimensionUpdaters[key][step].triggers).forEach(({
          prop,
          updateTrigger
        }) => {
          if (updateTrigger) {
            const fromProp = _updateTriggers[updateTrigger];
            if (typeof fromProp === "object" && !Array.isArray(fromProp)) {
              Object.assign(updateTriggers[accessor], fromProp);
            } else if (fromProp !== void 0) {
              updateTriggers[accessor][prop] = fromProp;
            }
          } else {
            updateTriggers[accessor][prop] = props[prop];
          }
        });
      });
    }
    return updateTriggers;
  }
  getSortedBins(props) {
    for (const key in this.dimensionUpdaters) {
      this.getDimensionSortedBins(props, this.dimensionUpdaters[key]);
    }
  }
  getDimensionSortedBins(props, dimensionUpdater) {
    const {
      key
    } = dimensionUpdater;
    const {
      getValue
    } = this.state.dimensions[key];
    const sortedBins = new BinSorter(this.state.layerData.data || [], {
      getValue,
      filterData: props._filterData
    });
    this.setDimensionState(key, {
      sortedBins
    });
    this.getDimensionValueDomain(props, dimensionUpdater);
  }
  getDimensionValueDomain(props, dimensionUpdater) {
    const {
      getDomain,
      key
    } = dimensionUpdater;
    const {
      triggers: {
        lowerPercentile,
        upperPercentile,
        scaleType
      }
    } = getDomain;
    const valueDomain = this.state.dimensions[key].sortedBins.getValueDomainByScale(props[scaleType.prop], [props[lowerPercentile.prop], props[upperPercentile.prop]]);
    this.setDimensionState(key, {
      valueDomain
    });
    this.getDimensionScale(props, dimensionUpdater);
  }
  getDimensionScale(props, dimensionUpdater) {
    const {
      key,
      getScaleFunc,
      getDomain
    } = dimensionUpdater;
    const {
      domain,
      range
    } = getScaleFunc.triggers;
    const {
      scaleType
    } = getDomain.triggers;
    const {
      onSet
    } = getScaleFunc;
    const dimensionRange = props[range.prop];
    const dimensionDomain = props[domain.prop] || this.state.dimensions[key].valueDomain;
    const getScaleFunction = getScaleFunctionByScaleType(scaleType && props[scaleType.prop]);
    const scaleFunc = getScaleFunction(dimensionDomain, dimensionRange);
    if (typeof onSet === "object" && typeof props[onSet.props] === "function") {
      props[onSet.props](scaleFunc.domain());
    }
    this.setDimensionState(key, {
      scaleFunc
    });
  }
  getSubLayerDimensionAttribute(key, nullValue) {
    return (cell) => {
      const {
        sortedBins,
        scaleFunc
      } = this.state.dimensions[key];
      const bin = sortedBins.binMap[cell.index];
      if (bin && bin.counts === 0) {
        return nullValue;
      }
      const cv = bin && bin.value;
      const domain = scaleFunc.domain();
      const isValueInDomain = cv >= domain[0] && cv <= domain[domain.length - 1];
      return isValueInDomain ? scaleFunc(cv) : nullValue;
    };
  }
  getSubLayerAccessors(props) {
    const accessors = {};
    for (const key in this.dimensionUpdaters) {
      const {
        accessor
      } = this.dimensionUpdaters[key];
      accessors[accessor] = this.getSubLayerDimensionAttribute(props, key);
    }
    return accessors;
  }
  getPickingInfo({
    info
  }) {
    const isPicked = info.picked && info.index > -1;
    let object = null;
    if (isPicked) {
      const cell = this.state.layerData.data[info.index];
      const binInfo = {};
      for (const key in this.dimensionUpdaters) {
        const {
          pickingInfo
        } = this.dimensionUpdaters[key];
        const {
          sortedBins
        } = this.state.dimensions[key];
        const value = sortedBins.binMap[cell.index] && sortedBins.binMap[cell.index].value;
        binInfo[pickingInfo] = value;
      }
      object = Object.assign(binInfo, cell, {
        points: cell.filteredPoints || cell.points
      });
    }
    info.picked = Boolean(object);
    info.object = object;
    return info;
  }
  getAccessor(dimensionKey) {
    if (!this.dimensionUpdaters.hasOwnProperty(dimensionKey)) {
      return nop;
    }
    return this.dimensionUpdaters[dimensionKey].attributeAccessor;
  }
};

// node_modules/@deck.gl/aggregation-layers/dist/esm/cpu-grid-layer/cpu-grid-layer.js
function nop2() {
}
var defaultProps4 = {
  colorDomain: null,
  colorRange: defaultColorRange,
  getColorValue: {
    type: "accessor",
    value: null
  },
  getColorWeight: {
    type: "accessor",
    value: 1
  },
  colorAggregation: "SUM",
  lowerPercentile: {
    type: "number",
    min: 0,
    max: 100,
    value: 0
  },
  upperPercentile: {
    type: "number",
    min: 0,
    max: 100,
    value: 100
  },
  colorScaleType: "quantize",
  onSetColorDomain: nop2,
  elevationDomain: null,
  elevationRange: [0, 1e3],
  getElevationValue: {
    type: "accessor",
    value: null
  },
  getElevationWeight: {
    type: "accessor",
    value: 1
  },
  elevationAggregation: "SUM",
  elevationLowerPercentile: {
    type: "number",
    min: 0,
    max: 100,
    value: 0
  },
  elevationUpperPercentile: {
    type: "number",
    min: 0,
    max: 100,
    value: 100
  },
  elevationScale: {
    type: "number",
    min: 0,
    value: 1
  },
  elevationScaleType: "linear",
  onSetElevationDomain: nop2,
  gridAggregator: pointToDensityGridDataCPU,
  cellSize: {
    type: "number",
    min: 0,
    max: 1e3,
    value: 1e3
  },
  coverage: {
    type: "number",
    min: 0,
    max: 1,
    value: 1
  },
  getPosition: {
    type: "accessor",
    value: (x) => x.position
  },
  extruded: false,
  material: true,
  _filterData: {
    type: "function",
    value: null,
    optional: true
  }
};
var CPUGridLayer = class extends AggregationLayer {
  initializeState() {
    const cpuAggregator = new CPUAggregator({
      getAggregator: (props) => props.gridAggregator,
      getCellSize: (props) => props.cellSize
    });
    this.state = {
      cpuAggregator,
      aggregatorState: cpuAggregator.state
    };
    const attributeManager = this.getAttributeManager();
    attributeManager.add({
      positions: {
        size: 3,
        type: 5130,
        accessor: "getPosition"
      }
    });
  }
  updateState(opts) {
    super.updateState(opts);
    this.setState({
      aggregatorState: this.state.cpuAggregator.updateState(opts, {
        viewport: this.context.viewport,
        attributes: this.getAttributes(),
        numInstances: this.getNumInstances()
      })
    });
  }
  getPickingInfo({
    info
  }) {
    return this.state.cpuAggregator.getPickingInfo({
      info
    });
  }
  _onGetSublayerColor(cell) {
    return this.state.cpuAggregator.getAccessor("fillColor")(cell);
  }
  _onGetSublayerElevation(cell) {
    return this.state.cpuAggregator.getAccessor("elevation")(cell);
  }
  _getSublayerUpdateTriggers() {
    return this.state.cpuAggregator.getUpdateTriggers(this.props);
  }
  renderLayers() {
    const {
      elevationScale,
      extruded,
      cellSize,
      coverage,
      material,
      transitions
    } = this.props;
    const {
      cpuAggregator
    } = this.state;
    const SubLayerClass = this.getSubLayerClass("grid-cell", GridCellLayer);
    const updateTriggers = this._getSublayerUpdateTriggers();
    return new SubLayerClass({
      cellSize,
      coverage,
      material,
      elevationScale,
      extruded,
      getFillColor: this._onGetSublayerColor.bind(this),
      getElevation: this._onGetSublayerElevation.bind(this),
      transitions: transitions && {
        getFillColor: transitions.getColorValue || transitions.getColorWeight,
        getElevation: transitions.getElevationValue || transitions.getElevationWeight
      }
    }, this.getSubLayerProps({
      id: "grid-cell",
      updateTriggers
    }), {
      data: cpuAggregator.state.layerData.data
    });
  }
};
_defineProperty(CPUGridLayer, "layerName", "CPUGridLayer");
_defineProperty(CPUGridLayer, "defaultProps", defaultProps4);

// node_modules/d3-hexbin/src/hexbin.js
var thirdPi = Math.PI / 3;
var angles = [0, thirdPi, 2 * thirdPi, 3 * thirdPi, 4 * thirdPi, 5 * thirdPi];
function pointX(d) {
  return d[0];
}
function pointY(d) {
  return d[1];
}
function hexbin_default() {
  var x0 = 0, y0 = 0, x1 = 1, y1 = 1, x = pointX, y = pointY, r, dx, dy;
  function hexbin(points) {
    var binsById = {}, bins = [], i, n = points.length;
    for (i = 0; i < n; ++i) {
      if (isNaN(px = +x.call(null, point = points[i], i, points)) || isNaN(py = +y.call(null, point, i, points)))
        continue;
      var point, px, py, pj = Math.round(py = py / dy), pi = Math.round(px = px / dx - (pj & 1) / 2), py1 = py - pj;
      if (Math.abs(py1) * 3 > 1) {
        var px1 = px - pi, pi2 = pi + (px < pi ? -1 : 1) / 2, pj2 = pj + (py < pj ? -1 : 1), px2 = px - pi2, py2 = py - pj2;
        if (px1 * px1 + py1 * py1 > px2 * px2 + py2 * py2)
          pi = pi2 + (pj & 1 ? 1 : -1) / 2, pj = pj2;
      }
      var id = pi + "-" + pj, bin = binsById[id];
      if (bin)
        bin.push(point);
      else {
        bins.push(bin = binsById[id] = [point]);
        bin.x = (pi + (pj & 1) / 2) * dx;
        bin.y = pj * dy;
      }
    }
    return bins;
  }
  function hexagon(radius) {
    var x02 = 0, y02 = 0;
    return angles.map(function(angle) {
      var x12 = Math.sin(angle) * radius, y12 = -Math.cos(angle) * radius, dx2 = x12 - x02, dy2 = y12 - y02;
      x02 = x12, y02 = y12;
      return [dx2, dy2];
    });
  }
  hexbin.hexagon = function(radius) {
    return "m" + hexagon(radius == null ? r : +radius).join("l") + "z";
  };
  hexbin.centers = function() {
    var centers = [], j = Math.round(y0 / dy), i = Math.round(x0 / dx);
    for (var y2 = j * dy; y2 < y1 + r; y2 += dy, ++j) {
      for (var x2 = i * dx + (j & 1) * dx / 2; x2 < x1 + dx / 2; x2 += dx) {
        centers.push([x2, y2]);
      }
    }
    return centers;
  };
  hexbin.mesh = function() {
    var fragment = hexagon(r).slice(0, 4).join("l");
    return hexbin.centers().map(function(p) {
      return "M" + p + "m" + fragment;
    }).join("");
  };
  hexbin.x = function(_) {
    return arguments.length ? (x = _, hexbin) : x;
  };
  hexbin.y = function(_) {
    return arguments.length ? (y = _, hexbin) : y;
  };
  hexbin.radius = function(_) {
    return arguments.length ? (r = +_, dx = r * 2 * Math.sin(thirdPi), dy = r * 1.5, hexbin) : r;
  };
  hexbin.size = function(_) {
    return arguments.length ? (x0 = y0 = 0, x1 = +_[0], y1 = +_[1], hexbin) : [x1 - x0, y1 - y0];
  };
  hexbin.extent = function(_) {
    return arguments.length ? (x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1], hexbin) : [[x0, y0], [x1, y1]];
  };
  return hexbin.radius(1);
}

// node_modules/@deck.gl/aggregation-layers/dist/esm/hexagon-layer/hexagon-aggregator.js
function pointToHexbin(props, aggregationParams) {
  const {
    data,
    radius
  } = props;
  const {
    viewport,
    attributes
  } = aggregationParams;
  const centerLngLat = data.length ? getPointsCenter(data, aggregationParams) : null;
  const radiusCommon = getRadiusInCommon(radius, viewport, centerLngLat);
  const screenPoints = [];
  const {
    iterable,
    objectInfo
  } = createIterable(data);
  const positions = attributes.positions.value;
  const {
    size
  } = attributes.positions.getAccessor();
  for (const object of iterable) {
    objectInfo.index++;
    const posIndex = objectInfo.index * size;
    const position = [positions[posIndex], positions[posIndex + 1]];
    const arrayIsFinite = Number.isFinite(position[0]) && Number.isFinite(position[1]);
    if (arrayIsFinite) {
      screenPoints.push({
        screenCoord: viewport.projectFlat(position),
        source: object,
        index: objectInfo.index
      });
    } else {
      log_default.warn("HexagonLayer: invalid position")();
    }
  }
  const newHexbin = hexbin_default().radius(radiusCommon).x((d) => d.screenCoord[0]).y((d) => d.screenCoord[1]);
  const hexagonBins = newHexbin(screenPoints);
  return {
    hexagons: hexagonBins.map((hex, index) => ({
      position: viewport.unprojectFlat([hex.x, hex.y]),
      points: hex,
      index
    })),
    radiusCommon
  };
}
function getPointsCenter(data, aggregationParams) {
  const {
    attributes
  } = aggregationParams;
  const positions = attributes.positions.value;
  const {
    size
  } = attributes.positions.getAccessor();
  let minX = Infinity;
  let minY = Infinity;
  let maxX = -Infinity;
  let maxY = -Infinity;
  let i;
  for (i = 0; i < size * data.length; i += size) {
    const x = positions[i];
    const y = positions[i + 1];
    const arrayIsFinite = Number.isFinite(x) && Number.isFinite(y);
    if (arrayIsFinite) {
      minX = Math.min(x, minX);
      maxX = Math.max(x, maxX);
      minY = Math.min(y, minY);
      maxY = Math.max(y, maxY);
    }
  }
  return [minX, minY, maxX, maxY].every(Number.isFinite) ? [(minX + maxX) / 2, (minY + maxY) / 2] : null;
}
function getRadiusInCommon(radius, viewport, center) {
  const {
    unitsPerMeter
  } = viewport.getDistanceScales(center);
  return radius * unitsPerMeter[0];
}

// node_modules/@deck.gl/aggregation-layers/dist/esm/hexagon-layer/hexagon-layer.js
function nop3() {
}
var defaultProps5 = {
  colorDomain: null,
  colorRange: defaultColorRange,
  getColorValue: {
    type: "accessor",
    value: null
  },
  getColorWeight: {
    type: "accessor",
    value: 1
  },
  colorAggregation: "SUM",
  lowerPercentile: {
    type: "number",
    value: 0,
    min: 0,
    max: 100
  },
  upperPercentile: {
    type: "number",
    value: 100,
    min: 0,
    max: 100
  },
  colorScaleType: "quantize",
  onSetColorDomain: nop3,
  elevationDomain: null,
  elevationRange: [0, 1e3],
  getElevationValue: {
    type: "accessor",
    value: null
  },
  getElevationWeight: {
    type: "accessor",
    value: 1
  },
  elevationAggregation: "SUM",
  elevationLowerPercentile: {
    type: "number",
    value: 0,
    min: 0,
    max: 100
  },
  elevationUpperPercentile: {
    type: "number",
    value: 100,
    min: 0,
    max: 100
  },
  elevationScale: {
    type: "number",
    min: 0,
    value: 1
  },
  elevationScaleType: "linear",
  onSetElevationDomain: nop3,
  radius: {
    type: "number",
    value: 1e3,
    min: 1
  },
  coverage: {
    type: "number",
    min: 0,
    max: 1,
    value: 1
  },
  extruded: false,
  hexagonAggregator: pointToHexbin,
  getPosition: {
    type: "accessor",
    value: (x) => x.position
  },
  material: true,
  _filterData: {
    type: "function",
    value: null,
    optional: true
  }
};
var HexagonLayer = class extends AggregationLayer {
  constructor(...args) {
    super(...args);
    _defineProperty(this, "state", void 0);
  }
  initializeState() {
    const cpuAggregator = new CPUAggregator({
      getAggregator: (props) => props.hexagonAggregator,
      getCellSize: (props) => props.radius
    });
    this.state = {
      cpuAggregator,
      aggregatorState: cpuAggregator.state,
      vertices: null
    };
    const attributeManager = this.getAttributeManager();
    attributeManager.add({
      positions: {
        size: 3,
        type: 5130,
        accessor: "getPosition"
      }
    });
  }
  updateState(opts) {
    super.updateState(opts);
    if (opts.changeFlags.propsOrDataChanged) {
      const aggregatorState = this.state.cpuAggregator.updateState(opts, {
        viewport: this.context.viewport,
        attributes: this.getAttributes()
      });
      if (this.state.aggregatorState.layerData !== aggregatorState.layerData) {
        const {
          hexagonVertices
        } = aggregatorState.layerData || {};
        this.setState({
          vertices: hexagonVertices && this.convertLatLngToMeterOffset(hexagonVertices)
        });
      }
      this.setState({
        aggregatorState
      });
    }
  }
  convertLatLngToMeterOffset(hexagonVertices) {
    const {
      viewport
    } = this.context;
    if (Array.isArray(hexagonVertices) && hexagonVertices.length === 6) {
      const vertex0 = hexagonVertices[0];
      const vertex3 = hexagonVertices[3];
      const centroid = [(vertex0[0] + vertex3[0]) / 2, (vertex0[1] + vertex3[1]) / 2];
      const centroidFlat = viewport.projectFlat(centroid);
      const {
        metersPerUnit
      } = viewport.getDistanceScales(centroid);
      const vertices = hexagonVertices.map((vt) => {
        const vtFlat = viewport.projectFlat(vt);
        return [(vtFlat[0] - centroidFlat[0]) * metersPerUnit[0], (vtFlat[1] - centroidFlat[1]) * metersPerUnit[1]];
      });
      return vertices;
    }
    log_default.error("HexagonLayer: hexagonVertices needs to be an array of 6 points")();
    return null;
  }
  getPickingInfo({
    info
  }) {
    return this.state.cpuAggregator.getPickingInfo({
      info
    });
  }
  _onGetSublayerColor(cell) {
    return this.state.cpuAggregator.getAccessor("fillColor")(cell);
  }
  _onGetSublayerElevation(cell) {
    return this.state.cpuAggregator.getAccessor("elevation")(cell);
  }
  _getSublayerUpdateTriggers() {
    return this.state.cpuAggregator.getUpdateTriggers(this.props);
  }
  renderLayers() {
    const {
      elevationScale,
      extruded,
      coverage,
      material,
      transitions
    } = this.props;
    const {
      aggregatorState,
      vertices
    } = this.state;
    const SubLayerClass = this.getSubLayerClass("hexagon-cell", ColumnLayer);
    const updateTriggers = this._getSublayerUpdateTriggers();
    const geometry = vertices ? {
      vertices,
      radius: 1
    } : {
      radius: aggregatorState.layerData.radiusCommon || 1,
      radiusUnits: "common",
      angle: 90
    };
    return new SubLayerClass({
      ...geometry,
      diskResolution: 6,
      elevationScale,
      extruded,
      coverage,
      material,
      getFillColor: this._onGetSublayerColor.bind(this),
      getElevation: this._onGetSublayerElevation.bind(this),
      transitions: transitions && {
        getFillColor: transitions.getColorValue || transitions.getColorWeight,
        getElevation: transitions.getElevationValue || transitions.getElevationWeight
      }
    }, this.getSubLayerProps({
      id: "hexagon-cell",
      updateTriggers
    }), {
      data: aggregatorState.layerData.data
    });
  }
};
_defineProperty(HexagonLayer, "layerName", "HexagonLayer");
_defineProperty(HexagonLayer, "defaultProps", defaultProps5);

// node_modules/@deck.gl/aggregation-layers/dist/esm/contour-layer/marching-squares-codes.js
var HALF = 0.5;
var ONE6TH = 1 / 6;
var OFFSET = {
  N: [0, HALF],
  E: [HALF, 0],
  S: [0, -HALF],
  W: [-HALF, 0],
  NE: [HALF, HALF],
  NW: [-HALF, HALF],
  SE: [HALF, -HALF],
  SW: [-HALF, -HALF]
};
var SW_TRIANGLE = [OFFSET.W, OFFSET.SW, OFFSET.S];
var SE_TRIANGLE = [OFFSET.S, OFFSET.SE, OFFSET.E];
var NE_TRIANGLE = [OFFSET.E, OFFSET.NE, OFFSET.N];
var NW_TRIANGLE = [OFFSET.NW, OFFSET.W, OFFSET.N];
var SW_TRAPEZOID = [[-HALF, ONE6TH], [-HALF, -ONE6TH], [-ONE6TH, -HALF], [ONE6TH, -HALF]];
var SE_TRAPEZOID = [[-ONE6TH, -HALF], [ONE6TH, -HALF], [HALF, -ONE6TH], [HALF, ONE6TH]];
var NE_TRAPEZOID = [[HALF, -ONE6TH], [HALF, ONE6TH], [ONE6TH, HALF], [-ONE6TH, HALF]];
var NW_TRAPEZOID = [[-HALF, ONE6TH], [-HALF, -ONE6TH], [ONE6TH, HALF], [-ONE6TH, HALF]];
var S_RECTANGLE = [OFFSET.W, OFFSET.SW, OFFSET.SE, OFFSET.E];
var E_RECTANGLE = [OFFSET.S, OFFSET.SE, OFFSET.NE, OFFSET.N];
var N_RECTANGLE = [OFFSET.NW, OFFSET.W, OFFSET.E, OFFSET.NE];
var W_RECTANGLE = [OFFSET.NW, OFFSET.SW, OFFSET.S, OFFSET.N];
var EW_RECTANGEL = [[-HALF, ONE6TH], [-HALF, -ONE6TH], [HALF, -ONE6TH], [HALF, ONE6TH]];
var SN_RECTANGEL = [[-ONE6TH, -HALF], [ONE6TH, -HALF], [ONE6TH, HALF], [-ONE6TH, HALF]];
var SQUARE = [OFFSET.NW, OFFSET.SW, OFFSET.SE, OFFSET.NE];
var SW_PENTAGON = [OFFSET.NW, OFFSET.SW, OFFSET.SE, OFFSET.E, OFFSET.N];
var SE_PENTAGON = [OFFSET.W, OFFSET.SW, OFFSET.SE, OFFSET.NE, OFFSET.N];
var NE_PENTAGON = [OFFSET.NW, OFFSET.W, OFFSET.S, OFFSET.SE, OFFSET.NE];
var NW_PENTAGON = [OFFSET.NW, OFFSET.SW, OFFSET.S, OFFSET.E, OFFSET.NE];
var NW_N_PENTAGON = [OFFSET.NW, OFFSET.W, [HALF, -ONE6TH], [HALF, ONE6TH], OFFSET.N];
var NE_E_PENTAGON = [[-ONE6TH, -HALF], [ONE6TH, -HALF], OFFSET.E, OFFSET.NE, OFFSET.N];
var SE_S_PENTAGON = [[-HALF, ONE6TH], [-HALF, -ONE6TH], OFFSET.S, OFFSET.SE, OFFSET.E];
var SW_W_PENTAGON = [OFFSET.W, OFFSET.SW, OFFSET.S, [ONE6TH, HALF], [-ONE6TH, HALF]];
var NW_W_PENTAGON = [OFFSET.NW, OFFSET.W, [-ONE6TH, -HALF], [ONE6TH, -HALF], OFFSET.N];
var NE_N_PENTAGON = [[-HALF, ONE6TH], [-HALF, -ONE6TH], OFFSET.E, OFFSET.NE, OFFSET.N];
var SE_E_PENTAGON = [OFFSET.S, OFFSET.SE, OFFSET.E, [ONE6TH, HALF], [-ONE6TH, HALF]];
var SW_S_PENTAGON = [OFFSET.W, OFFSET.SW, OFFSET.S, [HALF, -ONE6TH], [HALF, ONE6TH]];
var S_HEXAGON = [OFFSET.W, OFFSET.SW, OFFSET.SE, OFFSET.E, [ONE6TH, HALF], [-ONE6TH, HALF]];
var E_HEXAGON = [[-HALF, ONE6TH], [-HALF, -ONE6TH], OFFSET.S, OFFSET.SE, OFFSET.NE, OFFSET.N];
var N_HEXAGON = [OFFSET.NW, OFFSET.W, [-ONE6TH, -HALF], [ONE6TH, -HALF], OFFSET.E, OFFSET.NE];
var W_HEXAGON = [OFFSET.NW, OFFSET.SW, OFFSET.S, [HALF, -ONE6TH], [HALF, ONE6TH], OFFSET.N];
var SW_NE_HEXAGON = [OFFSET.W, OFFSET.SW, OFFSET.S, OFFSET.E, OFFSET.NE, OFFSET.N];
var NW_SE_HEXAGON = [OFFSET.NW, OFFSET.W, OFFSET.S, OFFSET.SE, OFFSET.E, OFFSET.N];
var NE_HEPTAGON = [[-HALF, ONE6TH], [-HALF, -ONE6TH], [-ONE6TH, -HALF], [ONE6TH, -HALF], OFFSET.E, OFFSET.NE, OFFSET.N];
var SW_HEPTAGON = [OFFSET.W, OFFSET.SW, OFFSET.S, [HALF, -ONE6TH], [HALF, ONE6TH], [ONE6TH, HALF], [-ONE6TH, HALF]];
var NW_HEPTAGON = [OFFSET.NW, OFFSET.W, [-ONE6TH, -HALF], [ONE6TH, -HALF], [HALF, -ONE6TH], [HALF, ONE6TH], OFFSET.N];
var SE_HEPTAGON = [[-HALF, ONE6TH], [-HALF, -ONE6TH], OFFSET.S, OFFSET.SE, OFFSET.E, [ONE6TH, HALF], [-ONE6TH, HALF]];
var OCTAGON = [[-HALF, ONE6TH], [-HALF, -ONE6TH], [-ONE6TH, -HALF], [ONE6TH, -HALF], [HALF, -ONE6TH], [HALF, ONE6TH], [ONE6TH, HALF], [-ONE6TH, HALF]];
var ISOLINES_CODE_OFFSET_MAP = {
  0: [],
  1: [[OFFSET.W, OFFSET.S]],
  2: [[OFFSET.S, OFFSET.E]],
  3: [[OFFSET.W, OFFSET.E]],
  4: [[OFFSET.N, OFFSET.E]],
  5: {
    0: [[OFFSET.W, OFFSET.S], [OFFSET.N, OFFSET.E]],
    1: [[OFFSET.W, OFFSET.N], [OFFSET.S, OFFSET.E]]
  },
  6: [[OFFSET.N, OFFSET.S]],
  7: [[OFFSET.W, OFFSET.N]],
  8: [[OFFSET.W, OFFSET.N]],
  9: [[OFFSET.N, OFFSET.S]],
  10: {
    0: [[OFFSET.W, OFFSET.N], [OFFSET.S, OFFSET.E]],
    1: [[OFFSET.W, OFFSET.S], [OFFSET.N, OFFSET.E]]
  },
  11: [[OFFSET.N, OFFSET.E]],
  12: [[OFFSET.W, OFFSET.E]],
  13: [[OFFSET.S, OFFSET.E]],
  14: [[OFFSET.W, OFFSET.S]],
  15: []
};
function ternaryToIndex(ternary) {
  return parseInt(ternary, 4);
}
var ISOBANDS_CODE_OFFSET_MAP = {
  [ternaryToIndex("0000")]: [],
  [ternaryToIndex("2222")]: [],
  [ternaryToIndex("2221")]: [SW_TRIANGLE],
  [ternaryToIndex("2212")]: [SE_TRIANGLE],
  [ternaryToIndex("2122")]: [NE_TRIANGLE],
  [ternaryToIndex("1222")]: [NW_TRIANGLE],
  [ternaryToIndex("0001")]: [SW_TRIANGLE],
  [ternaryToIndex("0010")]: [SE_TRIANGLE],
  [ternaryToIndex("0100")]: [NE_TRIANGLE],
  [ternaryToIndex("1000")]: [NW_TRIANGLE],
  [ternaryToIndex("2220")]: [SW_TRAPEZOID],
  [ternaryToIndex("2202")]: [SE_TRAPEZOID],
  [ternaryToIndex("2022")]: [NE_TRAPEZOID],
  [ternaryToIndex("0222")]: [NW_TRAPEZOID],
  [ternaryToIndex("0002")]: [SW_TRAPEZOID],
  [ternaryToIndex("0020")]: [SE_TRAPEZOID],
  [ternaryToIndex("0200")]: [NE_TRAPEZOID],
  [ternaryToIndex("2000")]: [NW_TRAPEZOID],
  [ternaryToIndex("0011")]: [S_RECTANGLE],
  [ternaryToIndex("0110")]: [E_RECTANGLE],
  [ternaryToIndex("1100")]: [N_RECTANGLE],
  [ternaryToIndex("1001")]: [W_RECTANGLE],
  [ternaryToIndex("2211")]: [S_RECTANGLE],
  [ternaryToIndex("2112")]: [E_RECTANGLE],
  [ternaryToIndex("1122")]: [N_RECTANGLE],
  [ternaryToIndex("1221")]: [W_RECTANGLE],
  [ternaryToIndex("2200")]: [EW_RECTANGEL],
  [ternaryToIndex("2002")]: [SN_RECTANGEL],
  [ternaryToIndex("0022")]: [EW_RECTANGEL],
  [ternaryToIndex("0220")]: [SN_RECTANGEL],
  [ternaryToIndex("1111")]: [SQUARE],
  [ternaryToIndex("1211")]: [SW_PENTAGON],
  [ternaryToIndex("2111")]: [SE_PENTAGON],
  [ternaryToIndex("1112")]: [NE_PENTAGON],
  [ternaryToIndex("1121")]: [NW_PENTAGON],
  [ternaryToIndex("1011")]: [SW_PENTAGON],
  [ternaryToIndex("0111")]: [SE_PENTAGON],
  [ternaryToIndex("1110")]: [NE_PENTAGON],
  [ternaryToIndex("1101")]: [NW_PENTAGON],
  [ternaryToIndex("1200")]: [NW_N_PENTAGON],
  [ternaryToIndex("0120")]: [NE_E_PENTAGON],
  [ternaryToIndex("0012")]: [SE_S_PENTAGON],
  [ternaryToIndex("2001")]: [SW_W_PENTAGON],
  [ternaryToIndex("1022")]: [NW_N_PENTAGON],
  [ternaryToIndex("2102")]: [NE_E_PENTAGON],
  [ternaryToIndex("2210")]: [SE_S_PENTAGON],
  [ternaryToIndex("0221")]: [SW_W_PENTAGON],
  [ternaryToIndex("1002")]: [NW_W_PENTAGON],
  [ternaryToIndex("2100")]: [NE_N_PENTAGON],
  [ternaryToIndex("0210")]: [SE_E_PENTAGON],
  [ternaryToIndex("0021")]: [SW_S_PENTAGON],
  [ternaryToIndex("1220")]: [NW_W_PENTAGON],
  [ternaryToIndex("0122")]: [NE_N_PENTAGON],
  [ternaryToIndex("2012")]: [SE_E_PENTAGON],
  [ternaryToIndex("2201")]: [SW_S_PENTAGON],
  [ternaryToIndex("0211")]: [S_HEXAGON],
  [ternaryToIndex("2110")]: [E_HEXAGON],
  [ternaryToIndex("1102")]: [N_HEXAGON],
  [ternaryToIndex("1021")]: [W_HEXAGON],
  [ternaryToIndex("2011")]: [S_HEXAGON],
  [ternaryToIndex("0112")]: [E_HEXAGON],
  [ternaryToIndex("1120")]: [N_HEXAGON],
  [ternaryToIndex("1201")]: [W_HEXAGON],
  [ternaryToIndex("2101")]: [SW_NE_HEXAGON],
  [ternaryToIndex("0121")]: [SW_NE_HEXAGON],
  [ternaryToIndex("1012")]: [NW_SE_HEXAGON],
  [ternaryToIndex("1210")]: [NW_SE_HEXAGON],
  [ternaryToIndex("0101")]: {
    0: [SW_TRIANGLE, NE_TRIANGLE],
    1: [SW_NE_HEXAGON],
    2: [SW_NE_HEXAGON]
  },
  [ternaryToIndex("1010")]: {
    0: [NW_TRIANGLE, SE_TRIANGLE],
    1: [NW_SE_HEXAGON],
    2: [NW_SE_HEXAGON]
  },
  [ternaryToIndex("2121")]: {
    0: [SW_NE_HEXAGON],
    1: [SW_NE_HEXAGON],
    2: [SW_TRIANGLE, NE_TRIANGLE]
  },
  [ternaryToIndex("1212")]: {
    0: [NW_SE_HEXAGON],
    1: [NW_SE_HEXAGON],
    2: [NW_TRIANGLE, SE_TRIANGLE]
  },
  [ternaryToIndex("2120")]: {
    0: [NE_HEPTAGON],
    1: [NE_HEPTAGON],
    2: [SW_TRAPEZOID, NE_TRIANGLE]
  },
  [ternaryToIndex("2021")]: {
    0: [SW_HEPTAGON],
    1: [SW_HEPTAGON],
    2: [SW_TRIANGLE, NE_TRAPEZOID]
  },
  [ternaryToIndex("1202")]: {
    0: [NW_HEPTAGON],
    1: [NW_HEPTAGON],
    2: [NW_TRIANGLE, SE_TRAPEZOID]
  },
  [ternaryToIndex("0212")]: {
    0: [SE_HEPTAGON],
    1: [SE_HEPTAGON],
    2: [SE_TRIANGLE, NW_TRAPEZOID]
  },
  [ternaryToIndex("0102")]: {
    0: [SW_TRAPEZOID, NE_TRIANGLE],
    1: [NE_HEPTAGON],
    2: [NE_HEPTAGON]
  },
  [ternaryToIndex("0201")]: {
    0: [SW_TRIANGLE, NE_TRAPEZOID],
    1: [SW_HEPTAGON],
    2: [SW_HEPTAGON]
  },
  [ternaryToIndex("1020")]: {
    0: [NW_TRIANGLE, SE_TRAPEZOID],
    1: [NW_HEPTAGON],
    2: [NW_HEPTAGON]
  },
  [ternaryToIndex("2010")]: {
    0: [SE_TRIANGLE, NW_TRAPEZOID],
    1: [SE_HEPTAGON],
    2: [SE_HEPTAGON]
  },
  [ternaryToIndex("2020")]: {
    0: [NW_TRAPEZOID, SE_TRAPEZOID],
    1: [OCTAGON],
    2: [SW_TRAPEZOID, NE_TRAPEZOID]
  },
  [ternaryToIndex("0202")]: {
    0: [NE_TRAPEZOID, SW_TRAPEZOID],
    1: [OCTAGON],
    2: [NW_TRAPEZOID, SE_TRAPEZOID]
  }
};

// node_modules/@deck.gl/aggregation-layers/dist/esm/contour-layer/marching-squares.js
var CONTOUR_TYPE = {
  ISO_LINES: 1,
  ISO_BANDS: 2
};
var DEFAULT_THRESHOLD_DATA = {
  zIndex: 0,
  zOffset: 5e-3
};
function getVertexCode(weight, threshold2) {
  if (Array.isArray(threshold2)) {
    if (weight < threshold2[0]) {
      return 0;
    }
    return weight < threshold2[1] ? 1 : 2;
  }
  return weight >= threshold2 ? 1 : 0;
}
function getCode(opts) {
  const {
    cellWeights,
    x,
    y,
    width,
    height
  } = opts;
  let threshold2 = opts.threshold;
  if (opts.thresholdValue) {
    log_default.deprecated("thresholdValue", "threshold")();
    threshold2 = opts.thresholdValue;
  }
  const isLeftBoundary = x < 0;
  const isRightBoundary = x >= width - 1;
  const isBottomBoundary = y < 0;
  const isTopBoundary = y >= height - 1;
  const isBoundary = isLeftBoundary || isRightBoundary || isBottomBoundary || isTopBoundary;
  const weights = {};
  const codes = {};
  if (isLeftBoundary || isTopBoundary) {
    codes.top = 0;
  } else {
    weights.top = cellWeights[(y + 1) * width + x];
    codes.top = getVertexCode(weights.top, threshold2);
  }
  if (isRightBoundary || isTopBoundary) {
    codes.topRight = 0;
  } else {
    weights.topRight = cellWeights[(y + 1) * width + x + 1];
    codes.topRight = getVertexCode(weights.topRight, threshold2);
  }
  if (isRightBoundary || isBottomBoundary) {
    codes.right = 0;
  } else {
    weights.right = cellWeights[y * width + x + 1];
    codes.right = getVertexCode(weights.right, threshold2);
  }
  if (isLeftBoundary || isBottomBoundary) {
    codes.current = 0;
  } else {
    weights.current = cellWeights[y * width + x];
    codes.current = getVertexCode(weights.current, threshold2);
  }
  const {
    top,
    topRight,
    right,
    current
  } = codes;
  let code = -1;
  if (Number.isFinite(threshold2)) {
    code = top << 3 | topRight << 2 | right << 1 | current;
  }
  if (Array.isArray(threshold2)) {
    code = top << 6 | topRight << 4 | right << 2 | current;
  }
  let meanCode = 0;
  if (!isBoundary) {
    meanCode = getVertexCode((weights.top + weights.topRight + weights.right + weights.current) / 4, threshold2);
  }
  return {
    code,
    meanCode
  };
}
function getVertices(opts) {
  const {
    gridOrigin,
    cellSize,
    x,
    y,
    code,
    meanCode,
    type = CONTOUR_TYPE.ISO_LINES
  } = opts;
  const thresholdData = {
    ...DEFAULT_THRESHOLD_DATA,
    ...opts.thresholdData
  };
  let offsets = type === CONTOUR_TYPE.ISO_BANDS ? ISOBANDS_CODE_OFFSET_MAP[code] : ISOLINES_CODE_OFFSET_MAP[code];
  if (!Array.isArray(offsets)) {
    offsets = offsets[meanCode];
  }
  const vZ = thresholdData.zIndex * thresholdData.zOffset;
  const rX = (x + 1) * cellSize[0];
  const rY = (y + 1) * cellSize[1];
  const refVertexX = gridOrigin[0] + rX;
  const refVertexY = gridOrigin[1] + rY;
  if (type === CONTOUR_TYPE.ISO_BANDS) {
    const polygons = [];
    offsets.forEach((polygonOffsets) => {
      const polygon = [];
      polygonOffsets.forEach((xyOffset) => {
        const vX = refVertexX + xyOffset[0] * cellSize[0];
        const vY = refVertexY + xyOffset[1] * cellSize[1];
        polygon.push([vX, vY, vZ]);
      });
      polygons.push(polygon);
    });
    return polygons;
  }
  const lines = [];
  offsets.forEach((xyOffsets) => {
    xyOffsets.forEach((offset) => {
      const vX = refVertexX + offset[0] * cellSize[0];
      const vY = refVertexY + offset[1] * cellSize[1];
      lines.push([vX, vY, vZ]);
    });
  });
  return lines;
}

// node_modules/@deck.gl/aggregation-layers/dist/esm/contour-layer/contour-utils.js
function generateContours({
  thresholdData,
  cellWeights,
  gridSize,
  gridOrigin,
  cellSize
}) {
  const contourSegments = [];
  const contourPolygons = [];
  const width = gridSize[0];
  const height = gridSize[1];
  let segmentIndex = 0;
  let polygonIndex = 0;
  for (const data of thresholdData) {
    const {
      contour
    } = data;
    const {
      threshold: threshold2
    } = contour;
    for (let x = -1; x < width; x++) {
      for (let y = -1; y < height; y++) {
        const {
          code,
          meanCode
        } = getCode({
          cellWeights,
          threshold: threshold2,
          x,
          y,
          width,
          height
        });
        const opts = {
          type: CONTOUR_TYPE.ISO_BANDS,
          gridOrigin,
          cellSize,
          x,
          y,
          width,
          height,
          code,
          meanCode,
          thresholdData: data
        };
        if (Array.isArray(threshold2)) {
          opts.type = CONTOUR_TYPE.ISO_BANDS;
          const polygons = getVertices(opts);
          for (const polygon of polygons) {
            contourPolygons[polygonIndex++] = {
              vertices: polygon,
              contour
            };
          }
        } else {
          opts.type = CONTOUR_TYPE.ISO_LINES;
          const vertices = getVertices(opts);
          for (let i = 0; i < vertices.length; i += 2) {
            contourSegments[segmentIndex++] = {
              start: vertices[i],
              end: vertices[i + 1],
              contour
            };
          }
        }
      }
    }
  }
  return {
    contourSegments,
    contourPolygons
  };
}

// node_modules/@deck.gl/aggregation-layers/dist/esm/contour-layer/contour-layer.js
var DEFAULT_COLOR = [255, 255, 255, 255];
var DEFAULT_STROKE_WIDTH = 1;
var DEFAULT_THRESHOLD = 1;
var defaultProps6 = {
  cellSize: {
    type: "number",
    min: 1,
    max: 1e3,
    value: 1e3
  },
  getPosition: {
    type: "accessor",
    value: (x) => x.position
  },
  getWeight: {
    type: "accessor",
    value: 1
  },
  gpuAggregation: true,
  aggregation: "SUM",
  contours: {
    type: "object",
    value: [{
      threshold: DEFAULT_THRESHOLD
    }],
    optional: true,
    compare: 3
  },
  zOffset: 5e-3
};
var POSITION_ATTRIBUTE_NAME2 = "positions";
var DIMENSIONS2 = {
  data: {
    props: ["cellSize"]
  },
  weights: {
    props: ["aggregation"],
    accessors: ["getWeight"]
  }
};
var ContourLayer = class extends GridAggregationLayer {
  initializeState() {
    super.initializeAggregationLayer({
      dimensions: DIMENSIONS2
    });
    this.setState({
      contourData: {},
      projectPoints: false,
      weights: {
        count: {
          size: 1,
          operation: AGGREGATION_OPERATION.SUM
        }
      }
    });
    const attributeManager = this.getAttributeManager();
    attributeManager.add({
      [POSITION_ATTRIBUTE_NAME2]: {
        size: 3,
        accessor: "getPosition",
        type: 5130,
        fp64: this.use64bitPositions()
      },
      count: {
        size: 3,
        accessor: "getWeight"
      }
    });
  }
  updateState(opts) {
    super.updateState(opts);
    let contoursChanged = false;
    const {
      oldProps,
      props
    } = opts;
    const {
      aggregationDirty
    } = this.state;
    if (oldProps.contours !== props.contours || oldProps.zOffset !== props.zOffset) {
      contoursChanged = true;
      this._updateThresholdData(opts.props);
    }
    if (this.getNumInstances() > 0 && (aggregationDirty || contoursChanged)) {
      this._generateContours();
    }
  }
  renderLayers() {
    const {
      contourSegments,
      contourPolygons
    } = this.state.contourData;
    const LinesSubLayerClass = this.getSubLayerClass("lines", LineLayer);
    const BandsSubLayerClass = this.getSubLayerClass("bands", SolidPolygonLayer);
    const lineLayer = contourSegments && contourSegments.length > 0 && new LinesSubLayerClass(this.getSubLayerProps({
      id: "lines"
    }), {
      data: this.state.contourData.contourSegments,
      getSourcePosition: (d) => d.start,
      getTargetPosition: (d) => d.end,
      getColor: (d) => d.contour.color || DEFAULT_COLOR,
      getWidth: (d) => d.contour.strokeWidth || DEFAULT_STROKE_WIDTH
    });
    const bandsLayer = contourPolygons && contourPolygons.length > 0 && new BandsSubLayerClass(this.getSubLayerProps({
      id: "bands"
    }), {
      data: this.state.contourData.contourPolygons,
      getPolygon: (d) => d.vertices,
      getFillColor: (d) => d.contour.color || DEFAULT_COLOR
    });
    return [lineLayer, bandsLayer];
  }
  updateAggregationState(opts) {
    const {
      props,
      oldProps
    } = opts;
    const {
      cellSize,
      coordinateSystem
    } = props;
    const {
      viewport
    } = this.context;
    const cellSizeChanged = oldProps.cellSize !== cellSize;
    let gpuAggregation = props.gpuAggregation;
    if (this.state.gpuAggregation !== props.gpuAggregation) {
      if (gpuAggregation && !GPUGridAggregator.isSupported(this.context.gl)) {
        log_default.warn("GPU Grid Aggregation not supported, falling back to CPU")();
        gpuAggregation = false;
      }
    }
    const gpuAggregationChanged = gpuAggregation !== this.state.gpuAggregation;
    this.setState({
      gpuAggregation
    });
    const {
      dimensions
    } = this.state;
    const positionsChanged = this.isAttributeChanged(POSITION_ATTRIBUTE_NAME2);
    const {
      data,
      weights
    } = dimensions;
    let {
      boundingBox
    } = this.state;
    if (positionsChanged) {
      boundingBox = getBoundingBox(this.getAttributes(), this.getNumInstances());
      this.setState({
        boundingBox
      });
    }
    if (positionsChanged || cellSizeChanged) {
      const {
        gridOffset,
        translation,
        width,
        height,
        numCol,
        numRow
      } = getGridParams(boundingBox, cellSize, viewport, coordinateSystem);
      this.allocateResources(numRow, numCol);
      this.setState({
        gridOffset,
        boundingBox,
        translation,
        posOffset: translation.slice(),
        gridOrigin: [-1 * translation[0], -1 * translation[1]],
        width,
        height,
        numCol,
        numRow
      });
    }
    const aggregationDataDirty = positionsChanged || gpuAggregationChanged || this.isAggregationDirty(opts, {
      dimension: data,
      compareAll: gpuAggregation
    });
    const aggregationWeightsDirty = this.isAggregationDirty(opts, {
      dimension: weights
    });
    if (aggregationWeightsDirty) {
      this._updateAccessors(opts);
    }
    if (aggregationDataDirty || aggregationWeightsDirty) {
      this._resetResults();
    }
    this.setState({
      aggregationDataDirty,
      aggregationWeightsDirty
    });
  }
  _updateAccessors(opts) {
    const {
      getWeight,
      aggregation,
      data
    } = opts.props;
    const {
      count
    } = this.state.weights;
    if (count) {
      count.getWeight = getWeight;
      count.operation = AGGREGATION_OPERATION[aggregation];
    }
    this.setState({
      getValue: getValueFunc(aggregation, getWeight, {
        data
      })
    });
  }
  _resetResults() {
    const {
      count
    } = this.state.weights;
    if (count) {
      count.aggregationData = null;
    }
  }
  _generateContours() {
    const {
      numCol,
      numRow,
      gridOrigin,
      gridOffset,
      thresholdData
    } = this.state;
    const {
      count
    } = this.state.weights;
    let {
      aggregationData
    } = count;
    if (!aggregationData) {
      aggregationData = count.aggregationBuffer.getData();
      count.aggregationData = aggregationData;
    }
    const {
      cellWeights
    } = GPUGridAggregator.getCellData({
      countsData: aggregationData
    });
    const contourData = generateContours({
      thresholdData,
      cellWeights,
      gridSize: [numCol, numRow],
      gridOrigin,
      cellSize: [gridOffset.xOffset, gridOffset.yOffset]
    });
    this.setState({
      contourData
    });
  }
  _updateThresholdData(props) {
    const {
      contours,
      zOffset
    } = props;
    const count = contours.length;
    const thresholdData = new Array(count);
    for (let i = 0; i < count; i++) {
      const contour = contours[i];
      thresholdData[i] = {
        contour,
        zIndex: contour.zIndex || i,
        zOffset
      };
    }
    this.setState({
      thresholdData
    });
  }
};
_defineProperty(ContourLayer, "layerName", "ContourLayer");
_defineProperty(ContourLayer, "defaultProps", defaultProps6);

// node_modules/@deck.gl/aggregation-layers/dist/esm/gpu-grid-layer/gpu-grid-cell-layer-vertex.glsl.js
var gpu_grid_cell_layer_vertex_glsl_default = "#version 300 es\n#define SHADER_NAME gpu-grid-cell-layer-vertex-shader\n#define RANGE_COUNT 6\n\nin vec3 positions;\nin vec3 normals;\n\nin vec4 colors;\nin vec4 elevations;\nin vec3 instancePickingColors;\nuniform vec2 offset;\nuniform bool extruded;\nuniform float cellSize;\nuniform float coverage;\nuniform float opacity;\nuniform float elevationScale;\n\nuniform ivec2 gridSize;\nuniform vec2 gridOrigin;\nuniform vec2 gridOriginLow;\nuniform vec2 gridOffset;\nuniform vec2 gridOffsetLow;\nuniform vec4 colorRange[RANGE_COUNT];\nuniform vec2 elevationRange;\nuniform vec2 colorDomain;\nuniform bool colorDomainValid;\nuniform vec2 elevationDomain;\nuniform bool elevationDomainValid;\n\nlayout(std140) uniform;\nuniform ColorData\n{\n  vec4 maxMinCount;\n} colorData;\nuniform ElevationData\n{\n  vec4 maxMinCount;\n} elevationData;\n\n#define EPSILON 0.00001\nout vec4 vColor;\n\nvec4 quantizeScale(vec2 domain, vec4 range[RANGE_COUNT], float value) {\n  vec4 outColor = vec4(0., 0., 0., 0.);\n  if (value >= (domain.x - EPSILON) && value <= (domain.y + EPSILON)) {\n    float domainRange = domain.y - domain.x;\n    if (domainRange <= 0.) {\n      outColor = colorRange[0];\n    } else {\n      float rangeCount = float(RANGE_COUNT);\n      float rangeStep = domainRange / rangeCount;\n      float idx = floor((value - domain.x) / rangeStep);\n      idx = clamp(idx, 0., rangeCount - 1.);\n      int intIdx = int(idx);\n      outColor = colorRange[intIdx];\n    }\n  }\n  return outColor;\n}\n\nfloat linearScale(vec2 domain, vec2 range, float value) {\n  if (value >= (domain.x - EPSILON) && value <= (domain.y + EPSILON)) {\n    return ((value - domain.x) / (domain.y - domain.x)) * (range.y - range.x) + range.x;\n  }\n  return -1.;\n}\n\nvoid main(void) {\n  vec2 clrDomain = colorDomainValid ? colorDomain : vec2(colorData.maxMinCount.a, colorData.maxMinCount.r);\n  vec4 color = quantizeScale(clrDomain, colorRange, colors.r);\n\n  float elevation = 0.0;\n\n  if (extruded) {\n    vec2 elvDomain = elevationDomainValid ? elevationDomain : vec2(elevationData.maxMinCount.a, elevationData.maxMinCount.r);\n    elevation = linearScale(elvDomain, elevationRange, elevations.r);\n    elevation = elevation  * (positions.z + 1.0) / 2.0 * elevationScale;\n  }\n  float shouldRender = float(color.r > 0.0 && elevations.r >= 0.0);\n  float dotRadius = cellSize / 2. * coverage * shouldRender;\n\n  int yIndex = (gl_InstanceID / gridSize[0]);\n  int xIndex = gl_InstanceID - (yIndex * gridSize[0]);\n\n  vec2 instancePositionXFP64 = mul_fp64(vec2(gridOffset[0], gridOffsetLow[0]), vec2(float(xIndex), 0.));\n  instancePositionXFP64 = sum_fp64(instancePositionXFP64, vec2(gridOrigin[0], gridOriginLow[0]));\n  vec2 instancePositionYFP64 = mul_fp64(vec2(gridOffset[1], gridOffsetLow[1]), vec2(float(yIndex), 0.));\n  instancePositionYFP64 = sum_fp64(instancePositionYFP64, vec2(gridOrigin[1], gridOriginLow[1]));\n\n  vec3 centroidPosition = vec3(instancePositionXFP64[0], instancePositionYFP64[0], elevation);\n  vec3 centroidPosition64Low = vec3(instancePositionXFP64[1], instancePositionYFP64[1], 0.0);\n  geometry.worldPosition = centroidPosition;\n  vec3 pos = vec3(project_size(positions.xy + offset) * dotRadius, 0.);\n  picking_setPickingColor(instancePickingColors);\n\n  gl_Position = project_position_to_clipspace(centroidPosition, centroidPosition64Low, pos, geometry.position);\n\n  vec3 normals_commonspace = project_normal(normals);\n\n   if (extruded) {\n    vec3 lightColor = lighting_getLightColor(color.rgb, project_uCameraPosition, geometry.position.xyz, normals_commonspace);\n    vColor = vec4(lightColor, color.a * opacity) / 255.;\n  } else {\n    vColor = vec4(color.rgb, color.a * opacity) / 255.;\n  }\n}\n";

// node_modules/@deck.gl/aggregation-layers/dist/esm/gpu-grid-layer/gpu-grid-cell-layer-fragment.glsl.js
var gpu_grid_cell_layer_fragment_glsl_default = "#version 300 es\n#define SHADER_NAME gpu-grid-cell-layer-fragment-shader\n\nprecision highp float;\n\nin vec4 vColor;\n\nout vec4 fragColor;\n\nvoid main(void) {\n  fragColor = vColor;\n  fragColor = picking_filterColor(fragColor);\n}\n";

// node_modules/@deck.gl/aggregation-layers/dist/esm/gpu-grid-layer/gpu-grid-cell-layer.js
var COLOR_DATA_UBO_INDEX = 0;
var ELEVATION_DATA_UBO_INDEX = 1;
var defaultProps7 = {
  colorDomain: null,
  colorRange: defaultColorRange,
  elevationDomain: null,
  elevationRange: [0, 1e3],
  elevationScale: {
    type: "number",
    min: 0,
    value: 1
  },
  gridSize: {
    type: "array",
    value: [1, 1]
  },
  gridOrigin: {
    type: "array",
    value: [0, 0]
  },
  gridOffset: {
    type: "array",
    value: [0, 0]
  },
  cellSize: {
    type: "number",
    min: 0,
    max: 1e3,
    value: 1e3
  },
  offset: {
    type: "array",
    value: [1, 1]
  },
  coverage: {
    type: "number",
    min: 0,
    max: 1,
    value: 1
  },
  extruded: true,
  material: true
};
var GPUGridCellLayer = class extends Layer {
  getShaders() {
    return super.getShaders({
      vs: gpu_grid_cell_layer_vertex_glsl_default,
      fs: gpu_grid_cell_layer_fragment_glsl_default,
      modules: [project32_default, gouraudLighting, picking_default, fp64arithmetic]
    });
  }
  initializeState({
    gl
  }) {
    const attributeManager = this.getAttributeManager();
    attributeManager.addInstanced({
      colors: {
        size: 4,
        noAlloc: true
      },
      elevations: {
        size: 4,
        noAlloc: true
      }
    });
    const model = this._getModel(gl);
    this._setupUniformBuffer(model);
    this.setState({
      model
    });
  }
  _getModel(gl) {
    return new Model(gl, {
      ...this.getShaders(),
      id: this.props.id,
      geometry: new CubeGeometry(),
      isInstanced: true
    });
  }
  draw({
    uniforms
  }) {
    const {
      cellSize,
      offset,
      extruded,
      elevationScale,
      coverage,
      gridSize,
      gridOrigin,
      gridOffset,
      elevationRange,
      colorMaxMinBuffer,
      elevationMaxMinBuffer
    } = this.props;
    const gridOriginLow = [fp64LowPart(gridOrigin[0]), fp64LowPart(gridOrigin[1])];
    const gridOffsetLow = [fp64LowPart(gridOffset[0]), fp64LowPart(gridOffset[1])];
    const domainUniforms = this.getDomainUniforms();
    const colorRange = colorRangeToFlatArray(this.props.colorRange);
    this.bindUniformBuffers(colorMaxMinBuffer, elevationMaxMinBuffer);
    this.state.model.setUniforms(uniforms).setUniforms(domainUniforms).setUniforms({
      cellSize,
      offset,
      extruded,
      elevationScale,
      coverage,
      gridSize,
      gridOrigin,
      gridOriginLow,
      gridOffset,
      gridOffsetLow,
      colorRange,
      elevationRange
    }).draw();
    this.unbindUniformBuffers(colorMaxMinBuffer, elevationMaxMinBuffer);
  }
  bindUniformBuffers(colorMaxMinBuffer, elevationMaxMinBuffer) {
    colorMaxMinBuffer.bind({
      target: 35345,
      index: COLOR_DATA_UBO_INDEX
    });
    elevationMaxMinBuffer.bind({
      target: 35345,
      index: ELEVATION_DATA_UBO_INDEX
    });
  }
  unbindUniformBuffers(colorMaxMinBuffer, elevationMaxMinBuffer) {
    colorMaxMinBuffer.unbind({
      target: 35345,
      index: COLOR_DATA_UBO_INDEX
    });
    elevationMaxMinBuffer.unbind({
      target: 35345,
      index: ELEVATION_DATA_UBO_INDEX
    });
  }
  getDomainUniforms() {
    const {
      colorDomain,
      elevationDomain
    } = this.props;
    const domainUniforms = {};
    if (colorDomain !== null) {
      domainUniforms.colorDomainValid = true;
      domainUniforms.colorDomain = colorDomain;
    } else {
      domainUniforms.colorDomainValid = false;
    }
    if (elevationDomain !== null) {
      domainUniforms.elevationDomainValid = true;
      domainUniforms.elevationDomain = elevationDomain;
    } else {
      domainUniforms.elevationDomainValid = false;
    }
    return domainUniforms;
  }
  _setupUniformBuffer(model) {
    const gl = this.context.gl;
    const programHandle = model.program.handle;
    const colorIndex = gl.getUniformBlockIndex(programHandle, "ColorData");
    const elevationIndex = gl.getUniformBlockIndex(programHandle, "ElevationData");
    gl.uniformBlockBinding(programHandle, colorIndex, COLOR_DATA_UBO_INDEX);
    gl.uniformBlockBinding(programHandle, elevationIndex, ELEVATION_DATA_UBO_INDEX);
  }
};
_defineProperty(GPUGridCellLayer, "layerName", "GPUGridCellLayer");
_defineProperty(GPUGridCellLayer, "defaultProps", defaultProps7);

// node_modules/@deck.gl/aggregation-layers/dist/esm/gpu-grid-layer/gpu-grid-layer.js
var defaultProps8 = {
  colorDomain: null,
  colorRange: defaultColorRange,
  getColorWeight: {
    type: "accessor",
    value: 1
  },
  colorAggregation: "SUM",
  elevationDomain: null,
  elevationRange: [0, 1e3],
  getElevationWeight: {
    type: "accessor",
    value: 1
  },
  elevationAggregation: "SUM",
  elevationScale: {
    type: "number",
    min: 0,
    value: 1
  },
  cellSize: {
    type: "number",
    min: 1,
    max: 1e3,
    value: 1e3
  },
  coverage: {
    type: "number",
    min: 0,
    max: 1,
    value: 1
  },
  getPosition: {
    type: "accessor",
    value: (x) => x.position
  },
  extruded: false,
  material: true
};
var DIMENSIONS3 = {
  data: {
    props: ["cellSize", "colorAggregation", "elevationAggregation"]
  }
};
var POSITION_ATTRIBUTE_NAME3 = "positions";
var GPUGridLayer = class extends GridAggregationLayer {
  initializeState({
    gl
  }) {
    const isSupported = GPUGridAggregator.isSupported(gl);
    if (!isSupported) {
      log_default.error("GPUGridLayer is not supported on this browser, use GridLayer instead")();
    }
    super.initializeAggregationLayer({
      dimensions: DIMENSIONS3
    });
    this.setState({
      gpuAggregation: true,
      projectPoints: false,
      isSupported,
      weights: {
        color: {
          needMin: true,
          needMax: true,
          combineMaxMin: true,
          maxMinBuffer: new Buffer(gl, {
            byteLength: 4 * 4,
            accessor: {
              size: 4,
              type: 5126,
              divisor: 1
            }
          })
        },
        elevation: {
          needMin: true,
          needMax: true,
          combineMaxMin: true,
          maxMinBuffer: new Buffer(gl, {
            byteLength: 4 * 4,
            accessor: {
              size: 4,
              type: 5126,
              divisor: 1
            }
          })
        }
      },
      positionAttributeName: "positions"
    });
    const attributeManager = this.getAttributeManager();
    attributeManager.add({
      [POSITION_ATTRIBUTE_NAME3]: {
        size: 3,
        accessor: "getPosition",
        type: 5130,
        fp64: this.use64bitPositions()
      },
      color: {
        size: 3,
        accessor: "getColorWeight"
      },
      elevation: {
        size: 3,
        accessor: "getElevationWeight"
      }
    });
  }
  updateState(opts) {
    if (this.state.isSupported === false) {
      return;
    }
    super.updateState(opts);
    const {
      aggregationDirty
    } = this.state;
    if (aggregationDirty) {
      this.setState({
        gridHash: null
      });
    }
  }
  getHashKeyForIndex(index) {
    const {
      numRow,
      numCol,
      boundingBox,
      gridOffset
    } = this.state;
    const gridSize = [numCol, numRow];
    const gridOrigin = [boundingBox.xMin, boundingBox.yMin];
    const cellSize = [gridOffset.xOffset, gridOffset.yOffset];
    const yIndex = Math.floor(index / gridSize[0]);
    const xIndex = index - yIndex * gridSize[0];
    const latIdx = Math.floor((yIndex * cellSize[1] + gridOrigin[1] + 90 + cellSize[1] / 2) / cellSize[1]);
    const lonIdx = Math.floor((xIndex * cellSize[0] + gridOrigin[0] + 180 + cellSize[0] / 2) / cellSize[0]);
    return "".concat(latIdx, "-").concat(lonIdx);
  }
  getPositionForIndex(index) {
    const {
      numRow,
      numCol,
      boundingBox,
      gridOffset
    } = this.state;
    const gridSize = [numCol, numRow];
    const gridOrigin = [boundingBox.xMin, boundingBox.yMin];
    const cellSize = [gridOffset.xOffset, gridOffset.yOffset];
    const yIndex = Math.floor(index / gridSize[0]);
    const xIndex = index - yIndex * gridSize[0];
    const yPos = yIndex * cellSize[1] + gridOrigin[1];
    const xPos = xIndex * cellSize[0] + gridOrigin[0];
    return [xPos, yPos];
  }
  getPickingInfo({
    info,
    mode
  }) {
    const {
      index
    } = info;
    let object = null;
    if (index >= 0) {
      const {
        gpuGridAggregator
      } = this.state;
      const position = this.getPositionForIndex(index);
      const colorInfo = GPUGridAggregator.getAggregationData({
        pixelIndex: index,
        ...gpuGridAggregator.getData("color")
      });
      const elevationInfo = GPUGridAggregator.getAggregationData({
        pixelIndex: index,
        ...gpuGridAggregator.getData("elevation")
      });
      object = {
        colorValue: colorInfo.cellWeight,
        elevationValue: elevationInfo.cellWeight,
        count: colorInfo.cellCount || elevationInfo.cellCount,
        position,
        totalCount: colorInfo.totalCount || elevationInfo.totalCount
      };
      if (mode !== "hover") {
        const {
          props
        } = this;
        let {
          gridHash
        } = this.state;
        if (!gridHash) {
          const {
            gridOffset,
            translation,
            boundingBox
          } = this.state;
          const {
            viewport
          } = this.context;
          const attributes = this.getAttributes();
          const cpuAggregation = pointToDensityGridDataCPU(props, {
            gridOffset,
            attributes,
            viewport,
            translation,
            boundingBox
          });
          gridHash = cpuAggregation.gridHash;
          this.setState({
            gridHash
          });
        }
        const key = this.getHashKeyForIndex(index);
        const cpuAggregationData = gridHash[key];
        Object.assign(object, cpuAggregationData);
      }
    }
    info.picked = Boolean(object);
    info.object = object;
    return info;
  }
  renderLayers() {
    if (!this.state.isSupported) {
      return null;
    }
    const {
      elevationScale,
      extruded,
      cellSize: cellSizeMeters,
      coverage,
      material,
      elevationRange,
      colorDomain,
      elevationDomain
    } = this.props;
    const {
      weights,
      numRow,
      numCol,
      gridOrigin,
      gridOffset
    } = this.state;
    const {
      color,
      elevation
    } = weights;
    const colorRange = colorRangeToFlatArray(this.props.colorRange);
    const SubLayerClass = this.getSubLayerClass("gpu-grid-cell", GPUGridCellLayer);
    return new SubLayerClass({
      gridSize: [numCol, numRow],
      gridOrigin,
      gridOffset: [gridOffset.xOffset, gridOffset.yOffset],
      colorRange,
      elevationRange,
      colorDomain,
      elevationDomain,
      cellSize: cellSizeMeters,
      coverage,
      material,
      elevationScale,
      extruded
    }, this.getSubLayerProps({
      id: "gpu-grid-cell"
    }), {
      data: {
        attributes: {
          colors: color.aggregationBuffer,
          elevations: elevation.aggregationBuffer
        }
      },
      colorMaxMinBuffer: color.maxMinBuffer,
      elevationMaxMinBuffer: elevation.maxMinBuffer,
      numInstances: numCol * numRow
    });
  }
  finalizeState(context) {
    const {
      color,
      elevation
    } = this.state.weights;
    [color, elevation].forEach((weight) => {
      const {
        aggregationBuffer,
        maxMinBuffer
      } = weight;
      maxMinBuffer.delete();
      aggregationBuffer === null || aggregationBuffer === void 0 ? void 0 : aggregationBuffer.delete();
    });
    super.finalizeState(context);
  }
  updateAggregationState(opts) {
    const {
      props,
      oldProps
    } = opts;
    const {
      cellSize,
      coordinateSystem
    } = props;
    const {
      viewport
    } = this.context;
    const cellSizeChanged = oldProps.cellSize !== cellSize;
    const {
      dimensions
    } = this.state;
    const positionsChanged = this.isAttributeChanged(POSITION_ATTRIBUTE_NAME3);
    const attributesChanged = positionsChanged || this.isAttributeChanged();
    let {
      boundingBox
    } = this.state;
    if (positionsChanged) {
      boundingBox = getBoundingBox(this.getAttributes(), this.getNumInstances());
      this.setState({
        boundingBox
      });
    }
    if (positionsChanged || cellSizeChanged) {
      const {
        gridOffset,
        translation,
        width,
        height,
        numCol,
        numRow
      } = getGridParams(boundingBox, cellSize, viewport, coordinateSystem);
      this.allocateResources(numRow, numCol);
      this.setState({
        gridOffset,
        translation,
        gridOrigin: [-1 * translation[0], -1 * translation[1]],
        width,
        height,
        numCol,
        numRow
      });
    }
    const aggregationDataDirty = attributesChanged || this.isAggregationDirty(opts, {
      dimension: dimensions.data,
      compareAll: true
    });
    if (aggregationDataDirty) {
      this._updateAccessors(opts);
    }
    this.setState({
      aggregationDataDirty
    });
  }
  _updateAccessors(opts) {
    const {
      colorAggregation,
      elevationAggregation
    } = opts.props;
    const {
      color,
      elevation
    } = this.state.weights;
    color.operation = AGGREGATION_OPERATION[colorAggregation];
    elevation.operation = AGGREGATION_OPERATION[elevationAggregation];
  }
};
_defineProperty(GPUGridLayer, "layerName", "GPUGridLayer");
_defineProperty(GPUGridLayer, "defaultProps", defaultProps8);

// node_modules/@deck.gl/aggregation-layers/dist/esm/grid-layer/grid-layer.js
var defaultProps9 = {
  ...GPUGridLayer.defaultProps,
  ...CPUGridLayer.defaultProps,
  gpuAggregation: false
};
var GridLayer = class extends CompositeLayer {
  constructor(...args) {
    super(...args);
    _defineProperty(this, "state", void 0);
  }
  initializeState() {
    this.state = {
      useGPUAggregation: true
    };
  }
  updateState({
    props
  }) {
    this.setState({
      useGPUAggregation: this.canUseGPUAggregation(props)
    });
  }
  renderLayers() {
    const {
      data,
      updateTriggers
    } = this.props;
    const id = this.state.useGPUAggregation ? "GPU" : "CPU";
    const LayerType = this.state.useGPUAggregation ? this.getSubLayerClass("GPU", GPUGridLayer) : this.getSubLayerClass("CPU", CPUGridLayer);
    return new LayerType(this.props, this.getSubLayerProps({
      id,
      updateTriggers
    }), {
      data
    });
  }
  canUseGPUAggregation(props) {
    const {
      gpuAggregation,
      lowerPercentile,
      upperPercentile,
      getColorValue,
      getElevationValue,
      colorScaleType
    } = props;
    if (!gpuAggregation) {
      return false;
    }
    if (!GPUGridAggregator.isSupported(this.context.gl)) {
      return false;
    }
    if (lowerPercentile !== 0 || upperPercentile !== 100) {
      return false;
    }
    if (getColorValue !== null || getElevationValue !== null) {
      return false;
    }
    if (colorScaleType === "quantile" || colorScaleType === "ordinal") {
      return false;
    }
    return true;
  }
};
_defineProperty(GridLayer, "layerName", "GridLayer");
_defineProperty(GridLayer, "defaultProps", defaultProps9);

// node_modules/@deck.gl/aggregation-layers/dist/esm/heatmap-layer/heatmap-layer-utils.js
function getBounds(points) {
  const x = points.map((p) => p[0]);
  const y = points.map((p) => p[1]);
  const xMin = Math.min.apply(null, x);
  const xMax = Math.max.apply(null, x);
  const yMin = Math.min.apply(null, y);
  const yMax = Math.max.apply(null, y);
  return [xMin, yMin, xMax, yMax];
}
function boundsContain(currentBounds, targetBounds) {
  if (targetBounds[0] >= currentBounds[0] && targetBounds[2] <= currentBounds[2] && targetBounds[1] >= currentBounds[1] && targetBounds[3] <= currentBounds[3]) {
    return true;
  }
  return false;
}
var scratchArray = new Float32Array(12);
function packVertices(points, dimensions = 2) {
  let index = 0;
  for (const point of points) {
    for (let i = 0; i < dimensions; i++) {
      scratchArray[index++] = point[i] || 0;
    }
  }
  return scratchArray;
}
function scaleToAspectRatio(boundingBox, width, height) {
  const [xMin, yMin, xMax, yMax] = boundingBox;
  const currentWidth = xMax - xMin;
  const currentHeight = yMax - yMin;
  let newWidth = currentWidth;
  let newHeight = currentHeight;
  if (currentWidth / currentHeight < width / height) {
    newWidth = width / height * currentHeight;
  } else {
    newHeight = height / width * currentWidth;
  }
  if (newWidth < width) {
    newWidth = width;
    newHeight = height;
  }
  const xCenter = (xMax + xMin) / 2;
  const yCenter = (yMax + yMin) / 2;
  return [xCenter - newWidth / 2, yCenter - newHeight / 2, xCenter + newWidth / 2, yCenter + newHeight / 2];
}
function getTextureCoordinates(point, bounds) {
  const [xMin, yMin, xMax, yMax] = bounds;
  return [(point[0] - xMin) / (xMax - xMin), (point[1] - yMin) / (yMax - yMin)];
}
function getTextureParams({
  gl,
  floatTargetSupport
}) {
  return floatTargetSupport ? {
    format: isWebGL2(gl) ? 34836 : 6408,
    type: 5126
  } : {
    format: 6408,
    type: 5121
  };
}

// node_modules/@deck.gl/aggregation-layers/dist/esm/heatmap-layer/triangle-layer-vertex.glsl.js
var triangle_layer_vertex_glsl_default = "#define SHADER_NAME heatp-map-layer-vertex-shader\n\nuniform sampler2D maxTexture;\nuniform float intensity;\nuniform vec2 colorDomain;\nuniform float threshold;\nuniform float aggregationMode;\n\nattribute vec3 positions;\nattribute vec2 texCoords;\n\nvarying vec2 vTexCoords;\nvarying float vIntensityMin;\nvarying float vIntensityMax;\n\nvoid main(void) {\n  gl_Position = project_position_to_clipspace(positions, vec3(0.0), vec3(0.0));\n  vTexCoords = texCoords;\n  vec4 maxTexture = texture2D(maxTexture, vec2(0.5));\n  float maxValue = aggregationMode < 0.5 ? maxTexture.r : maxTexture.g;\n  float minValue = maxValue * threshold;\n  if (colorDomain[1] > 0.) {\n    maxValue = colorDomain[1];\n    minValue = colorDomain[0];\n  }\n  vIntensityMax = intensity / maxValue;\n  vIntensityMin = intensity / minValue;\n}\n";

// node_modules/@deck.gl/aggregation-layers/dist/esm/heatmap-layer/triangle-layer-fragment.glsl.js
var triangle_layer_fragment_glsl_default = "#define SHADER_NAME triangle-layer-fragment-shader\n\nprecision highp float;\n\nuniform float opacity;\nuniform sampler2D texture;\nuniform sampler2D colorTexture;\nuniform float aggregationMode;\n\nvarying vec2 vTexCoords;\nvarying float vIntensityMin;\nvarying float vIntensityMax;\n\nvec4 getLinearColor(float value) {\n  float factor = clamp(value * vIntensityMax, 0., 1.);\n  vec4 color = texture2D(colorTexture, vec2(factor, 0.5));\n  color.a *= min(value * vIntensityMin, 1.0);\n  return color;\n}\n\nvoid main(void) {\n  vec4 weights = texture2D(texture, vTexCoords);\n  float weight = weights.r;\n\n  if (aggregationMode > 0.5) {\n    weight /= max(1.0, weights.a);\n  }\n  if (weight <= 0.) {\n     discard;\n  }\n\n  vec4 linearColor = getLinearColor(weight);\n  linearColor.a *= opacity;\n  gl_FragColor =linearColor;\n}\n";

// node_modules/@deck.gl/aggregation-layers/dist/esm/heatmap-layer/triangle-layer.js
var TriangleLayer = class extends Layer {
  getShaders() {
    return {
      vs: triangle_layer_vertex_glsl_default,
      fs: triangle_layer_fragment_glsl_default,
      modules: [project32_default]
    };
  }
  initializeState({
    gl
  }) {
    const attributeManager = this.getAttributeManager();
    attributeManager.add({
      positions: {
        size: 3,
        noAlloc: true
      },
      texCoords: {
        size: 2,
        noAlloc: true
      }
    });
    this.setState({
      model: this._getModel(gl)
    });
  }
  _getModel(gl) {
    const {
      vertexCount
    } = this.props;
    return new Model(gl, {
      ...this.getShaders(),
      id: this.props.id,
      geometry: new Geometry({
        drawMode: 6,
        vertexCount
      })
    });
  }
  draw({
    uniforms
  }) {
    const {
      model
    } = this.state;
    const {
      texture,
      maxTexture,
      colorTexture,
      intensity,
      threshold: threshold2,
      aggregationMode,
      colorDomain
    } = this.props;
    model.setUniforms({
      ...uniforms,
      texture,
      maxTexture,
      colorTexture,
      intensity,
      threshold: threshold2,
      aggregationMode,
      colorDomain
    }).draw();
  }
};
_defineProperty(TriangleLayer, "layerName", "TriangleLayer");

// node_modules/@deck.gl/aggregation-layers/dist/esm/heatmap-layer/weights-vs.glsl.js
var weights_vs_glsl_default = "attribute vec3 positions;\nattribute vec3 positions64Low;\nattribute float weights;\nvarying vec4 weightsTexture;\nuniform float radiusPixels;\nuniform float textureWidth;\nuniform vec4 commonBounds;\nuniform float weightsScale;\nvoid main()\n{\n  weightsTexture = vec4(weights * weightsScale, 0., 0., 1.);\n\n  float radiusTexels  = project_pixel_size(radiusPixels) * textureWidth / (commonBounds.z - commonBounds.x);\n  gl_PointSize = radiusTexels * 2.;\n\n  vec3 commonPosition = project_position(positions, positions64Low);\n  gl_Position.xy = (commonPosition.xy - commonBounds.xy) / (commonBounds.zw - commonBounds.xy) ;\n  gl_Position.xy = (gl_Position.xy * 2.) - (1.);\n}\n";

// node_modules/@deck.gl/aggregation-layers/dist/esm/heatmap-layer/weights-fs.glsl.js
var weights_fs_glsl_default = "varying vec4 weightsTexture;\nfloat gaussianKDE(float u){\n  return pow(2.71828, -u*u/0.05555)/(1.77245385*0.166666);\n}\nvoid main()\n{\n  float dist = length(gl_PointCoord - vec2(0.5, 0.5));\n  if (dist > 0.5) {\n    discard;\n  }\n  gl_FragColor = weightsTexture * gaussianKDE(2. * dist);\n  DECKGL_FILTER_COLOR(gl_FragColor, geometry);\n}\n";

// node_modules/@deck.gl/aggregation-layers/dist/esm/heatmap-layer/max-vs.glsl.js
var max_vs_glsl_default = "attribute vec4 inTexture;\nvarying vec4 outTexture;\n\nvoid main()\n{\noutTexture = inTexture;\ngl_Position = vec4(0, 0, 0, 1.);\ngl_PointSize = 1.0;\n}\n";

// node_modules/@deck.gl/aggregation-layers/dist/esm/heatmap-layer/max-fs.glsl.js
var max_fs_glsl_default = "varying vec4 outTexture;\nvoid main() {\n  gl_FragColor = outTexture;\n  gl_FragColor.g = outTexture.r / max(1.0, outTexture.a);\n}\n";

// node_modules/@deck.gl/aggregation-layers/dist/esm/heatmap-layer/heatmap-layer.js
var RESOLUTION = 2;
var TEXTURE_OPTIONS = {
  mipmaps: false,
  parameters: {
    [10240]: 9729,
    [10241]: 9729,
    [10242]: 33071,
    [10243]: 33071
  },
  dataFormat: 6408
};
var DEFAULT_COLOR_DOMAIN = [0, 0];
var AGGREGATION_MODE = {
  SUM: 0,
  MEAN: 1
};
var defaultProps10 = {
  getPosition: {
    type: "accessor",
    value: (x) => x.position
  },
  getWeight: {
    type: "accessor",
    value: 1
  },
  intensity: {
    type: "number",
    min: 0,
    value: 1
  },
  radiusPixels: {
    type: "number",
    min: 1,
    max: 100,
    value: 50
  },
  colorRange: defaultColorRange,
  threshold: {
    type: "number",
    min: 0,
    max: 1,
    value: 0.05
  },
  colorDomain: {
    type: "array",
    value: null,
    optional: true
  },
  aggregation: "SUM",
  weightsTextureSize: {
    type: "number",
    min: 128,
    max: 2048,
    value: 2048
  },
  debounceTimeout: {
    type: "number",
    min: 0,
    max: 1e3,
    value: 500
  }
};
var REQUIRED_FEATURES2 = [FEATURES.BLEND_EQUATION_MINMAX, FEATURES.TEXTURE_FLOAT];
var FLOAT_TARGET_FEATURES = [FEATURES.COLOR_ATTACHMENT_RGBA32F, FEATURES.FLOAT_BLEND];
var DIMENSIONS4 = {
  data: {
    props: ["radiusPixels"]
  }
};
var HeatmapLayer = class extends AggregationLayer {
  constructor(...args) {
    super(...args);
    _defineProperty(this, "state", void 0);
  }
  initializeState() {
    const {
      gl
    } = this.context;
    if (!hasFeatures(gl, REQUIRED_FEATURES2)) {
      this.setState({
        supported: false
      });
      log_default.error("HeatmapLayer: ".concat(this.id, " is not supported on this browser"))();
      return;
    }
    super.initializeAggregationLayer(DIMENSIONS4);
    this.setState({
      supported: true,
      colorDomain: DEFAULT_COLOR_DOMAIN
    });
    this._setupTextureParams();
    this._setupAttributes();
    this._setupResources();
  }
  shouldUpdateState({
    changeFlags
  }) {
    return changeFlags.somethingChanged;
  }
  updateState(opts) {
    if (!this.state.supported) {
      return;
    }
    super.updateState(opts);
    this._updateHeatmapState(opts);
  }
  _updateHeatmapState(opts) {
    const {
      props,
      oldProps
    } = opts;
    const changeFlags = this._getChangeFlags(opts);
    if (changeFlags.dataChanged || changeFlags.viewportChanged) {
      changeFlags.boundsChanged = this._updateBounds(changeFlags.dataChanged);
      this._updateTextureRenderingBounds();
    }
    if (changeFlags.dataChanged || changeFlags.boundsChanged) {
      clearTimeout(this.state.updateTimer);
      this.setState({
        isWeightMapDirty: true
      });
    } else if (changeFlags.viewportZoomChanged) {
      this._debouncedUpdateWeightmap();
    }
    if (props.colorRange !== oldProps.colorRange) {
      this._updateColorTexture(opts);
    }
    if (this.state.isWeightMapDirty) {
      this._updateWeightmap();
    }
    this.setState({
      zoom: opts.context.viewport.zoom
    });
  }
  renderLayers() {
    if (!this.state.supported) {
      return [];
    }
    const {
      weightsTexture,
      triPositionBuffer,
      triTexCoordBuffer,
      maxWeightsTexture,
      colorTexture,
      colorDomain
    } = this.state;
    const {
      updateTriggers,
      intensity,
      threshold: threshold2,
      aggregation
    } = this.props;
    const TriangleLayerClass = this.getSubLayerClass("triangle", TriangleLayer);
    return new TriangleLayerClass(this.getSubLayerProps({
      id: "triangle-layer",
      updateTriggers
    }), {
      coordinateSystem: COORDINATE_SYSTEM.DEFAULT,
      data: {
        attributes: {
          positions: triPositionBuffer,
          texCoords: triTexCoordBuffer
        }
      },
      vertexCount: 4,
      maxTexture: maxWeightsTexture,
      colorTexture,
      aggregationMode: AGGREGATION_MODE[aggregation] || 0,
      texture: weightsTexture,
      intensity,
      threshold: threshold2,
      colorDomain
    });
  }
  finalizeState(context) {
    super.finalizeState(context);
    const {
      weightsTransform,
      weightsTexture,
      maxWeightTransform,
      maxWeightsTexture,
      triPositionBuffer,
      triTexCoordBuffer,
      colorTexture,
      updateTimer
    } = this.state;
    weightsTransform === null || weightsTransform === void 0 ? void 0 : weightsTransform.delete();
    weightsTexture === null || weightsTexture === void 0 ? void 0 : weightsTexture.delete();
    maxWeightTransform === null || maxWeightTransform === void 0 ? void 0 : maxWeightTransform.delete();
    maxWeightsTexture === null || maxWeightsTexture === void 0 ? void 0 : maxWeightsTexture.delete();
    triPositionBuffer === null || triPositionBuffer === void 0 ? void 0 : triPositionBuffer.delete();
    triTexCoordBuffer === null || triTexCoordBuffer === void 0 ? void 0 : triTexCoordBuffer.delete();
    colorTexture === null || colorTexture === void 0 ? void 0 : colorTexture.delete();
    if (updateTimer) {
      clearTimeout(updateTimer);
    }
  }
  _getAttributeManager() {
    return new AttributeManager(this.context.gl, {
      id: this.props.id,
      stats: this.context.stats
    });
  }
  _getChangeFlags(opts) {
    const changeFlags = {};
    const {
      dimensions
    } = this.state;
    changeFlags.dataChanged = this.isAttributeChanged() || this.isAggregationDirty(opts, {
      compareAll: true,
      dimension: dimensions.data
    });
    changeFlags.viewportChanged = opts.changeFlags.viewportChanged;
    const {
      zoom
    } = this.state;
    if (!opts.context.viewport || opts.context.viewport.zoom !== zoom) {
      changeFlags.viewportZoomChanged = true;
    }
    return changeFlags;
  }
  _createTextures() {
    const {
      gl
    } = this.context;
    const {
      textureSize,
      format,
      type
    } = this.state;
    this.setState({
      weightsTexture: new Texture2D(gl, {
        width: textureSize,
        height: textureSize,
        format,
        type,
        ...TEXTURE_OPTIONS
      }),
      maxWeightsTexture: new Texture2D(gl, {
        format,
        type,
        ...TEXTURE_OPTIONS
      })
    });
  }
  _setupAttributes() {
    const attributeManager = this.getAttributeManager();
    attributeManager.add({
      positions: {
        size: 3,
        type: 5130,
        accessor: "getPosition"
      },
      weights: {
        size: 1,
        accessor: "getWeight"
      }
    });
    this.setState({
      positionAttributeName: "positions"
    });
  }
  _setupTextureParams() {
    const {
      gl
    } = this.context;
    const {
      weightsTextureSize
    } = this.props;
    const textureSize = Math.min(weightsTextureSize, getParameters(gl, 3379));
    const floatTargetSupport = hasFeatures(gl, FLOAT_TARGET_FEATURES);
    const {
      format,
      type
    } = getTextureParams({
      gl,
      floatTargetSupport
    });
    const weightsScale = floatTargetSupport ? 1 : 1 / 255;
    this.setState({
      textureSize,
      format,
      type,
      weightsScale
    });
    if (!floatTargetSupport) {
      log_default.warn("HeatmapLayer: ".concat(this.id, " rendering to float texture not supported, fallingback to low precession format"))();
    }
  }
  getShaders(type) {
    return super.getShaders(type === "max-weights-transform" ? {
      vs: max_vs_glsl_default,
      _fs: max_fs_glsl_default
    } : {
      vs: weights_vs_glsl_default,
      _fs: weights_fs_glsl_default
    });
  }
  _createWeightsTransform(shaders = {}) {
    var _weightsTransform;
    const {
      gl
    } = this.context;
    let {
      weightsTransform
    } = this.state;
    const {
      weightsTexture
    } = this.state;
    (_weightsTransform = weightsTransform) === null || _weightsTransform === void 0 ? void 0 : _weightsTransform.delete();
    weightsTransform = new Transform(gl, {
      id: "".concat(this.id, "-weights-transform"),
      elementCount: 1,
      _targetTexture: weightsTexture,
      _targetTextureVarying: "weightsTexture",
      ...shaders
    });
    this.setState({
      weightsTransform
    });
  }
  _setupResources() {
    const {
      gl
    } = this.context;
    this._createTextures();
    const {
      textureSize,
      weightsTexture,
      maxWeightsTexture
    } = this.state;
    const weightsTransformShaders = this.getShaders("weights-transform");
    this._createWeightsTransform(weightsTransformShaders);
    const maxWeightsTransformShaders = this.getShaders("max-weights-transform");
    const maxWeightTransform = new Transform(gl, {
      id: "".concat(this.id, "-max-weights-transform"),
      _sourceTextures: {
        inTexture: weightsTexture
      },
      _targetTexture: maxWeightsTexture,
      _targetTextureVarying: "outTexture",
      ...maxWeightsTransformShaders,
      elementCount: textureSize * textureSize
    });
    this.setState({
      weightsTexture,
      maxWeightsTexture,
      maxWeightTransform,
      zoom: null,
      triPositionBuffer: new Buffer(gl, {
        byteLength: 48,
        accessor: {
          size: 3
        }
      }),
      triTexCoordBuffer: new Buffer(gl, {
        byteLength: 48,
        accessor: {
          size: 2
        }
      })
    });
  }
  updateShaders(shaderOptions) {
    this._createWeightsTransform(shaderOptions);
  }
  _updateMaxWeightValue() {
    const {
      maxWeightTransform
    } = this.state;
    maxWeightTransform.run({
      parameters: {
        blend: true,
        depthTest: false,
        blendFunc: [1, 1],
        blendEquation: 32776
      }
    });
  }
  _updateBounds(forceUpdate = false) {
    const {
      viewport
    } = this.context;
    const viewportCorners = [viewport.unproject([0, 0]), viewport.unproject([viewport.width, 0]), viewport.unproject([viewport.width, viewport.height]), viewport.unproject([0, viewport.height])].map((p) => p.map(Math.fround));
    const visibleWorldBounds = getBounds(viewportCorners);
    const newState = {
      visibleWorldBounds,
      viewportCorners
    };
    let boundsChanged = false;
    if (forceUpdate || !this.state.worldBounds || !boundsContain(this.state.worldBounds, visibleWorldBounds)) {
      const scaledCommonBounds = this._worldToCommonBounds(visibleWorldBounds);
      const worldBounds = this._commonToWorldBounds(scaledCommonBounds);
      if (this.props.coordinateSystem === COORDINATE_SYSTEM.LNGLAT) {
        worldBounds[1] = Math.max(worldBounds[1], -85.051129);
        worldBounds[3] = Math.min(worldBounds[3], 85.051129);
        worldBounds[0] = Math.max(worldBounds[0], -360);
        worldBounds[2] = Math.min(worldBounds[2], 360);
      }
      const normalizedCommonBounds = this._worldToCommonBounds(worldBounds);
      newState.worldBounds = worldBounds;
      newState.normalizedCommonBounds = normalizedCommonBounds;
      boundsChanged = true;
    }
    this.setState(newState);
    return boundsChanged;
  }
  _updateTextureRenderingBounds() {
    const {
      triPositionBuffer,
      triTexCoordBuffer,
      normalizedCommonBounds,
      viewportCorners
    } = this.state;
    const {
      viewport
    } = this.context;
    triPositionBuffer.subData(packVertices(viewportCorners, 3));
    const textureBounds = viewportCorners.map((p) => getTextureCoordinates(viewport.projectPosition(p), normalizedCommonBounds));
    triTexCoordBuffer.subData(packVertices(textureBounds, 2));
  }
  _updateColorTexture(opts) {
    const {
      colorRange
    } = opts.props;
    let {
      colorTexture
    } = this.state;
    const colors = colorRangeToFlatArray(colorRange, false, Uint8Array);
    if (colorTexture) {
      colorTexture.setImageData({
        data: colors,
        width: colorRange.length
      });
    } else {
      colorTexture = new Texture2D(this.context.gl, {
        data: colors,
        width: colorRange.length,
        height: 1,
        ...TEXTURE_OPTIONS
      });
    }
    this.setState({
      colorTexture
    });
  }
  _updateWeightmap() {
    const {
      radiusPixels,
      colorDomain,
      aggregation
    } = this.props;
    const {
      weightsTransform,
      worldBounds,
      textureSize,
      weightsTexture,
      weightsScale
    } = this.state;
    this.state.isWeightMapDirty = false;
    const commonBounds = this._worldToCommonBounds(worldBounds, {
      useLayerCoordinateSystem: true
    });
    if (colorDomain && aggregation === "SUM") {
      const {
        viewport
      } = this.context;
      const metersPerPixel = viewport.distanceScales.metersPerUnit[2] * (commonBounds[2] - commonBounds[0]) / textureSize;
      this.state.colorDomain = colorDomain.map((x) => x * metersPerPixel * weightsScale);
    } else {
      this.state.colorDomain = colorDomain || DEFAULT_COLOR_DOMAIN;
    }
    const uniforms = {
      radiusPixels,
      commonBounds,
      textureWidth: textureSize,
      weightsScale
    };
    weightsTransform.update({
      elementCount: this.getNumInstances()
    });
    withParameters(this.context.gl, {
      clearColor: [0, 0, 0, 0]
    }, () => {
      weightsTransform.run({
        uniforms,
        parameters: {
          blend: true,
          depthTest: false,
          blendFunc: [1, 1],
          blendEquation: 32774
        },
        clearRenderTarget: true,
        attributes: this.getAttributes(),
        moduleSettings: this.getModuleSettings()
      });
    });
    this._updateMaxWeightValue();
    weightsTexture.setParameters({
      [10240]: 9729,
      [10241]: 9729
    });
  }
  _debouncedUpdateWeightmap(fromTimer = false) {
    let {
      updateTimer
    } = this.state;
    const {
      debounceTimeout
    } = this.props;
    if (fromTimer) {
      updateTimer = null;
      this._updateBounds(true);
      this._updateTextureRenderingBounds();
      this.setState({
        isWeightMapDirty: true
      });
    } else {
      this.setState({
        isWeightMapDirty: false
      });
      clearTimeout(updateTimer);
      updateTimer = setTimeout(this._debouncedUpdateWeightmap.bind(this, true), debounceTimeout);
    }
    this.setState({
      updateTimer
    });
  }
  _worldToCommonBounds(worldBounds, opts = {}) {
    const {
      useLayerCoordinateSystem = false
    } = opts;
    const [minLong, minLat, maxLong, maxLat] = worldBounds;
    const {
      viewport
    } = this.context;
    const {
      textureSize
    } = this.state;
    const {
      coordinateSystem
    } = this.props;
    const offsetMode = useLayerCoordinateSystem && (coordinateSystem === COORDINATE_SYSTEM.LNGLAT_OFFSETS || coordinateSystem === COORDINATE_SYSTEM.METER_OFFSETS);
    const offsetOriginCommon = offsetMode ? viewport.projectPosition(this.props.coordinateOrigin) : [0, 0];
    const size = textureSize * RESOLUTION / viewport.scale;
    let bottomLeftCommon;
    let topRightCommon;
    if (useLayerCoordinateSystem && !offsetMode) {
      bottomLeftCommon = this.projectPosition([minLong, minLat, 0]);
      topRightCommon = this.projectPosition([maxLong, maxLat, 0]);
    } else {
      bottomLeftCommon = viewport.projectPosition([minLong, minLat, 0]);
      topRightCommon = viewport.projectPosition([maxLong, maxLat, 0]);
    }
    return scaleToAspectRatio([bottomLeftCommon[0] - offsetOriginCommon[0], bottomLeftCommon[1] - offsetOriginCommon[1], topRightCommon[0] - offsetOriginCommon[0], topRightCommon[1] - offsetOriginCommon[1]], size, size);
  }
  _commonToWorldBounds(commonBounds) {
    const [xMin, yMin, xMax, yMax] = commonBounds;
    const {
      viewport
    } = this.context;
    const bottomLeftWorld = viewport.unprojectPosition([xMin, yMin]);
    const topRightWorld = viewport.unprojectPosition([xMax, yMax]);
    return bottomLeftWorld.slice(0, 2).concat(topRightWorld.slice(0, 2));
  }
};
_defineProperty(HeatmapLayer, "layerName", "HeatmapLayer");
_defineProperty(HeatmapLayer, "defaultProps", defaultProps10);
export {
  AGGREGATION_OPERATION,
  AmbientLight,
  ArcLayer,
  AttributeManager,
  BitmapLayer,
  COORDINATE_SYSTEM,
  CPUGridLayer,
  ColumnLayer,
  CompositeLayer,
  ContourLayer,
  Controller,
  Deck,
  deckgl_default as DeckGL,
  DeckRenderer,
  DirectionalLight,
  FirstPersonController,
  FirstPersonView,
  FirstPersonViewport,
  FlyToInterpolator,
  GPUGridLayer,
  GeoJsonLayer,
  GeohashLayer,
  GreatCircleLayer,
  GridCellLayer,
  GridLayer,
  H3ClusterLayer,
  H3HexagonLayer,
  HeatmapLayer,
  HexagonLayer,
  IconLayer,
  Layer,
  LayerExtension,
  LayerManager,
  LightingEffect,
  LineLayer,
  LinearInterpolator,
  MVTLayer,
  MapController,
  MapView,
  OPERATION,
  OrbitController,
  OrbitView,
  OrbitViewport,
  OrthographicController,
  OrthographicView,
  OrthographicViewport,
  PathLayer,
  PointCloudLayer,
  PointLight,
  PolygonLayer,
  PostProcessEffect,
  QuadkeyLayer,
  S2Layer,
  ScatterplotLayer,
  ScenegraphLayer,
  ScreenGridLayer,
  SimpleMeshLayer,
  SolidPolygonLayer,
  TRANSITION_EVENTS,
  TerrainLayer,
  Tesselator,
  TextLayer,
  Tile3DLayer,
  TileLayer,
  TransitionInterpolator,
  TripsLayer,
  UNIT,
  VERSION,
  View,
  Viewport,
  WebMercatorViewport,
  GlobeController as _GlobeController,
  GlobeView as _GlobeView,
  GlobeViewport as _GlobeViewport,
  Tileset2D as _Tileset2D,
  assert,
  createIterable,
  deckgl_default as default,
  fp64LowPart,
  gouraudLighting,
  log_default as log,
  phongLighting,
  picking_default as picking,
  project_default as project,
  project32_default as project32,
  shadow_default as shadow
};
//# sourceMappingURL=deck__gl.js.map
